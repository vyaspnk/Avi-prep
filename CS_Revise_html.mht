From: "Saved by Internet Explorer 11"
Subject: CS_Revise.html
Date: Fri, 10 Feb 2017 09:22:37 -0800
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: file://D:\Personal\Prashanth\Backup\Dropbox\Notes\CS_Intv\CS_Revise.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.23573

=EF=BB=BF<!DOCTYPE HTML>
<!DOCTYPE html PUBLIC "" ""><HTML><HEAD><META content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">
  =20
<META http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3DUTF-8">  =20
<TITLE>CS_Revise.html</TITLE>  =20
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.18525">  =20
<META name=3D"viewport" content=3D"width=3Ddevice-width, =
initial-scale=3D1.0">  =20
<STYLE>div.oembedall-githubrepos{border:1px solid =
#DDD;border-radius:4px;list-style-type:none;margin:0 0 10px;padding:8px =
10px 0;font:13.34px/1.4 =
helvetica,arial,freesans,clean,sans-serif;width:452px;background-color:#f=
ff}div.oembedall-githubrepos =
.oembedall-body{background:-moz-linear-gradient(center =
top,#FAFAFA,#EFEFEF);background:-webkit-gradient(linear,left top,left =
bottom,from(#FAFAFA),to(#EFEFEF));border-bottom-left-radius:4px;border-bo=
ttom-right-radius:4px;border-top:1px solid =
#EEE;margin-left:-10px;margin-top:8px;padding:5px =
10px;width:100%}div.oembedall-githubrepos =
h3{font-size:14px;margin:0;padding-left:18px;white-space:nowrap}div.oembe=
dall-githubrepos =
p.oembedall-description{color:#444;font-size:12px;margin:0 0 =
3px}div.oembedall-githubrepos =
p.oembedall-updated-at{color:#888;font-size:11px;margin:0}div.oembedall-g=
ithubrepos =
ul.oembedall-repo-stats{border:none;float:right;font-size:11px;font-weigh=
t:700;padding-left:15px;position:relative;z-index:5;margin:0}div.oembedal=
l-githubrepos ul.oembedall-repo-stats =
li{border:none;color:#666;display:inline-block;list-style-type:none;margi=
n:0!important}div.oembedall-githubrepos ul.oembedall-repo-stats li =
a{background-color:transparent;border:none;color:#666!important;backgroun=
d-position:5px -2px;background-repeat:no-repeat;border-left:1px solid =
#DDD;display:inline-block;height:21px;line-height:21px;padding:0 5px 0 =
23px}div.oembedall-githubrepos ul.oembedall-repo-stats li:first-child =
a{border-left:medium none;margin-right:-3px}div.oembedall-githubrepos =
ul.oembedall-repo-stats li a:hover{background:5px -27px no-repeat =
#4183C4;color:#FFF!important;text-decoration:none}div.oembedall-githubrep=
os ul.oembedall-repo-stats li:first-child =
a:hover{border-bottom-left-radius:3px;border-top-left-radius:3px}ul.oembe=
dall-repo-stats li:last-child =
a:hover{border-bottom-right-radius:3px;border-top-right-radius:3px}span.o=
embedall-closehide{background-color:#aaa;border-radius:2px;cursor:pointer=
;margin-right:3px}div.oembedall-container{margin-top:5px;text-align:left}=
.oembedall-ljuser{font-weight:700}.oembedall-ljuser =
img{vertical-align:bottom;border:0;padding-right:1px}.oembedall-stoqembed=
{border-bottom:1px dotted =
#999;float:left;overflow:hidden;width:730px;line-height:1;background:#FFF=
;color:#000;font-family:Arial,Liberation Sans,DejaVu =
Sans,sans-serif;font-size:80%;text-align:left;margin:0;padding:0}.oembeda=
ll-stoqembed =
a{color:#07C;text-decoration:none;margin:0;padding:0}.oembedall-stoqembed=
 a:hover{text-decoration:underline}.oembedall-stoqembed =
a:visited{color:#4A6B82}.oembedall-stoqembed h3{font-family:Trebuchet =
MS,Liberation Sans,DejaVu =
Sans,sans-serif;font-size:130%;font-weight:700;margin:0;padding:0}.oembed=
all-stoqembed =
.oembedall-reputation-score{color:#444;font-size:120%;font-weight:700;mar=
gin-right:2px}.oembedall-stoqembed =
.oembedall-user-info{height:35px;width:185px}.oembedall-stoqembed =
.oembedall-user-info =
.oembedall-user-gravatar32{float:left;height:32px;width:32px}.oembedall-s=
toqembed .oembedall-user-info =
.oembedall-user-details{float:left;margin-left:5px;overflow:hidden;white-=
space:nowrap;width:145px}.oembedall-stoqembed =
.oembedall-question-hyperlink{font-weight:700}.oembedall-stoqembed =
.oembedall-stats{background:#EEE;margin:0 0 0 7px;padding:4px 7px =
6px;width:58px}.oembedall-stoqembed =
.oembedall-statscontainer{float:left;margin-right:8px;width:86px}.oembeda=
ll-stoqembed .oembedall-votes{color:#555;padding:0 0 =
7px;text-align:center}.oembedall-stoqembed =
.oembedall-vote-count-post{font-size:240%;color:#808185;display:block;fon=
t-weight:700}.oembedall-stoqembed =
.oembedall-views{color:#999;padding-top:4px;text-align:center}.oembedall-=
stoqembed .oembedall-status{margin-top:-3px;padding:4px =
0;text-align:center;background:#75845C;color:#FFF}.oembedall-stoqembed =
.oembedall-status =
strong{color:#FFF;display:block;font-size:140%}.oembedall-stoqembed =
.oembedall-summary{float:left;width:635px}.oembedall-stoqembed =
.oembedall-excerpt{line-height:1.2;margin:0;padding:0 0 =
5px}.oembedall-stoqembed =
.oembedall-tags{float:left;line-height:18px}.oembedall-stoqembed =
.oembedall-tags a:hover{text-decoration:none}.oembedall-stoqembed =
.oembedall-post-tag{background-color:#E0EAF1;border-bottom:1px solid =
#3E6D8E;border-right:1px solid =
#7F9FB6;color:#3E6D8E;font-size:90%;line-height:2.4;margin:2px 2px 2px =
0;padding:3px =
4px;text-decoration:none;white-space:nowrap}.oembedall-stoqembed =
.oembedall-post-tag:hover{background-color:#3E6D8E;border-bottom:1px =
solid #37607D;border-right:1px solid =
#37607D;color:#E0EAF1}.oembedall-stoqembed =
.oembedall-fr{float:right}.oembedall-stoqembed =
.oembedall-statsarrow{background-image:url(http://cdn.sstatic.net/stackov=
erflow/img/sprites.png?v=3D3);background-repeat:no-repeat;overflow:hidden=
;background-position:0 =
-435px;float:right;height:13px;margin-top:12px;width:7px}.oembedall-faceb=
ook1{border:1px solid #1A3C6C;padding:0;font:13.34px/1.4 =
verdana;width:500px}.oembedall-facebook2{background-color:#627add}.oembed=
all-facebook2 =
a{color:#e8e8e8;text-decoration:none}.oembedall-facebookBody{background-c=
olor:#fff;vertical-align:top;padding:5px}.oembedall-facebookBody =
.contents{display:inline-block;width:100%}.oembedall-facebookBody div =
img{float:left;margin-right:5px}div.oembedall-lanyard{-webkit-box-shadow:=
none;-webkit-transition-delay:0s;-webkit-transition-duration:.40000000596=
04645s;-webkit-transition-property:width;-webkit-transition-timing-functi=
on:cubic-bezier(0.42,0,.58,1);background-attachment:scroll;background-cli=
p:border-box;background-color:transparent;background-image:none;backgroun=
d-origin:padding-box;border-width:0;box-shadow:none;color:#112644;display=
:block;float:left;font-family:'Trebuchet =
MS',Trebuchet,sans-serif;font-size:16px;height:253px;line-height:19px;mar=
gin:0;max-width:none;min-height:0;outline:#112644 =
0;overflow-x:visible;overflow-y:visible;padding:0;position:relative;text-=
align:left;vertical-align:baseline;width:804px}div.oembedall-lanyard =
.tagline{font-size:1.5em}div.oembedall-lanyard =
.wrapper{overflow:hidden;clear:both}div.oembedall-lanyard =
.split{float:left;display:inline}div.oembedall-lanyard .prominent-place =
.flag:active,div.oembedall-lanyard .prominent-place =
.flag:focus,div.oembedall-lanyard .prominent-place =
.flag:hover,div.oembedall-lanyard .prominent-place =
.flag:link,div.oembedall-lanyard .prominent-place =
.flag:visited{float:left;display:block;width:48px;height:48px;position:re=
lative;top:-5px;margin-right:10px}div.oembedall-lanyard =
.place-context{font-size:.889em}div.oembedall-lanyard .prominent-place =
.sub-place{display:block}div.oembedall-lanyard =
.prominent-place{font-size:1.125em;line-height:1.1em;font-weight:400}div.=
oembedall-lanyard =
.main-date{color:#8CB4E0;font-weight:700;line-height:1.1}div.oembedall-la=
nyard .first{width:48.57%;margin:0 0 0 2.857%}.mermaid =
.label{color:#333}.node circle,.node polygon,.node =
rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.edgePath =
.path{stroke:green;stroke-width:1.5px}.cluster =
rect{fill:#cdffb2;rx:40;stroke:#6eaa49;stroke-width:1px}.cluster =
text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;st=
roke:none}.actor-line{stroke:grey}.messageLine0{stroke-width:1.5;stroke-d=
asharray:"2 =
2";marker-end:"url(#arrowhead)";stroke:#333}.messageLine1{stroke-width:1.=
5;stroke-dasharray:"2 2";stroke:#333}#arrowhead{fill:#333}#crosshead =
path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;str=
oke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:=
#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:"2 =
2";marker-end:"url(#arrowhead)";stroke:#326932}.note{stroke:#6eaa49;fill:=
#fff5ad}.noteText{fill:#000;stroke:none;font-family:'trebuchet =
ms',verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section=
0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectio=
nTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTi=
tle{text-anchor:start;font-size:11px;text-height:14px}.grid =
.tick{stroke:lightgrey;opacity:.3;shape-rendering:crispEdges}.grid =
path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{st=
roke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutside=
Right{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fil=
l:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.t=
askText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540=
c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3=
{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540=
c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important=
}.done0,.done1,.done2,.done3{stroke:grey;fill:lightgrey;stroke-width:2}.d=
oneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.cri=
t1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.active=
Crit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.=
doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:lightgrey;str=
oke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.a=
ctiveCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCrit=
Text1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-a=
nchor:middle;font-size:18px;fill:#000}text{font-family:'trebuchet =
ms',verdana,arial;font-size:14px}html{height:100%}body{margin:0!important=
;padding:5px 20px =
26px!important;background-color:#fff;font-family:"Lucida Grande","Segoe =
UI","Apple SD Gothic Neo","Malgun Gothic","Lucida Sans =
Unicode",Helvetica,Arial,sans-serif;font-size:.9em;overflow-x:hidden;over=
flow-y:auto}br,h1,h2,h3,h4,h5,h6{clear:both}hr.page{background:url(data:i=
mage/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAYAAAAECAYAAACtBE5DAAAAGXRFWHRTb=
2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAA=
AAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8=
+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhN=
UCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgI=
j4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi=
1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJ=
odHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFk=
b2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20ve=
GFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG=
9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6OENDRjNBN0E=
2NTZBMTFFMEI3QjRBODM4NzJDMjlGNDgiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6OEND=
RjNBN0I2NTZBMTFFMEI3QjRBODM4NzJDMjlGNDgiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZ=
WY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4Q0NGM0E3ODY1NkExMUUwQjdCNEE4Mzg3MkMyOUY0OC=
Igc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4Q0NGM0E3OTY1NkExMUUwQjdCNEE4Mzg3MkM=
yOUY0OCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94=
cGFja2V0IGVuZD0iciI/PqqezsUAAAAfSURBVHjaYmRABcYwBiM2QSA4y4hNEKYDQxAEAAIMA=
HNGAzhkPOlYAAAAAElFTkSuQmCC) =
repeat-x;border:0;height:3px;padding:0}hr.underscore{border-top-style:das=
hed!important}body =
>:first-child{margin-top:0!important}img.plugin{box-shadow:0 1px 3px =
rgba(0,0,0,.1);border-radius:3px}iframe{border:0}figure{-webkit-margin-be=
fore:0;-webkit-margin-after:0;-webkit-margin-start:0;-webkit-margin-end:0=
}kbd{border:1px solid =
#aaa;-moz-border-radius:2px;-webkit-border-radius:2px;border-radius:2px;-=
moz-box-shadow:1px 2px 2px #ddd;-webkit-box-shadow:1px 2px 2px =
#ddd;box-shadow:1px 2px 2px =
#ddd;background-color:#f9f9f9;background-image:-moz-linear-gradient(top,#=
eee,#f9f9f9,#eee);background-image:-o-linear-gradient(top,#eee,#f9f9f9,#e=
ee);background-image:-webkit-linear-gradient(top,#eee,#f9f9f9,#eee);backg=
round-image:linear-gradient(top,#eee,#f9f9f9,#eee);padding:1px =
3px;font-family:inherit;font-size:.85em}.oembeded =
.oembed_photo{display:inline-block}img[data-echo]{margin:25px =
0;width:100px;height:100px;background:url(../img/ajax.gif) center center =
no-repeat =
#fff}.spinner{display:inline-block;width:10px;height:10px;margin-bottom:-=
.1em;border:2px solid =
rgba(0,0,0,.5);border-top-color:transparent;border-radius:100%;-webkit-an=
imation:spin 1s infinite linear;animation:spin 1s infinite =
linear}.spinner:after{content:'';display:block;width:0;height:0;position:=
absolute;top:-6px;left:0;border:4px solid =
transparent;border-bottom-color:rgba(0,0,0,.5);-webkit-transform:rotate(4=
5deg);transform:rotate(45deg)}@-webkit-keyframes =
spin{to{-webkit-transform:rotate(360deg)}}@keyframes =
spin{to{transform:rotate(360deg)}}p.toc{margin:0!important}p.toc =
ul{padding-left:10px}p.toc>ul{padding:10px;margin:0 =
10px;display:inline-block;border:1px solid =
#ededed;border-radius:5px}p.toc li,p.toc ul{list-style-type:none}p.toc =
li{width:100%;padding:0;overflow:hidden}p.toc li =
a::after{content:"."}p.toc li a:before{content:"=E2=80=A2 "}p.toc =
h5{text-transform:uppercase}p.toc =
.title{float:left;padding-right:3px}p.toc =
.number{margin:0;float:right;padding-left:3px;background:#fff;display:non=
e}input.task-list-item{margin-left:-1.62em}.markdown{font-family:"Hiragin=
o Sans GB","Microsoft YaHei",STHeiti,SimSun,"Lucida Grande","Lucida Sans =
Unicode","Lucida Sans",'Segoe UI',AppleSDGothicNeo-Medium,'Malgun =
Gothic',Verdana,Tahoma,sans-serif;padding:20px}.markdown =
a{text-decoration:none;vertical-align:baseline}.markdown =
a:hover{text-decoration:underline}.markdown =
h1{font-size:2.2em;font-weight:700;margin:1.5em 0 1em}.markdown =
h2{font-size:1.8em;font-weight:700;margin:1.275em 0 .85em}.markdown =
h3{font-size:1.6em;font-weight:700;margin:1.125em 0 .75em}.markdown =
h4{font-size:1.4em;font-weight:700;margin:.99em 0 .66em}.markdown =
h5{font-size:1.2em;font-weight:700;margin:.855em 0 .57em}.markdown =
h6{font-size:1em;font-weight:700;margin:.75em 0 .5em}.markdown =
h1+p,.markdown h1:first-child,.markdown h2+p,.markdown =
h2:first-child,.markdown h3+p,.markdown h3:first-child,.markdown =
h4+p,.markdown h4:first-child,.markdown h5+p,.markdown =
h5:first-child,.markdown h6+p,.markdown =
h6:first-child{margin-top:0}.markdown hr{border:1px solid #ccc}.markdown =
p{margin:1em 0;word-wrap:break-word}.markdown =
ol{list-style-type:decimal}.markdown =
li{display:list-item;line-height:1.4em}.markdown blockquote{margin:1em =
20px}.markdown blockquote>:first-child{margin-top:0}.markdown =
blockquote>:last-child{margin-bottom:0}.markdown blockquote =
cite:before{content:'\2014 \00A0'}.markdown =
.code{border-radius:3px;word-wrap:break-word}.markdown =
pre{border-radius:3px;word-wrap:break-word;border:1px solid =
#ccc;overflow:auto;padding:.5em}.markdown pre =
code{border:0;display:block}.markdown =
pre>code{font-family:Consolas,Inconsolata,Courier,monospace;font-weight:7=
00;white-space:pre;margin:0}.markdown =
code{border-radius:3px;word-wrap:break-word;border:1px solid =
#ccc;padding:0 5px;margin:0 2px}.markdown img{max-width:100%}.markdown =
mark{color:#000;background-color:#fcf8e3}.markdown =
table{padding:0;border-collapse:collapse;border-spacing:0;margin-bottom:1=
6px}.markdown table tr td,.markdown table tr th{border:1px solid =
#ccc;margin:0;padding:6px 13px}.markdown table tr =
th{font-weight:700}.markdown table tr =
th>:first-child{margin-top:0}.markdown table tr =
th>:last-child{margin-bottom:0}.markdown table tr =
td>:first-child{margin-top:0}.markdown table tr =
td>:last-child{margin-bottom:0}@import =
url(http://fonts.googleapis.com/css?family=3DRoboto+Condensed:300italic,4=
00italic,700italic,400,300,700);.haroopad{padding:20px;color:#222;font-si=
ze:15px;font-family:"Roboto Condensed",Tauri,"Hiragino Sans =
GB","Microsoft YaHei",STHeiti,SimSun,"Lucida Grande","Lucida Sans =
Unicode","Lucida Sans",'Segoe UI',AppleSDGothicNeo-Medium,'Malgun =
Gothic',Verdana,Tahoma,sans-serif;background:#fff;line-height:1.6;-webkit=
-font-smoothing:antialiased}.haroopad a{color:#3269a0}.haroopad =
a:hover{color:#4183c4}.haroopad h2{border-bottom:1px solid =
#e6e6e6}.haroopad h6{color:#777}.haroopad hr{border:1px solid =
#e6e6e6}.haroopad blockquote>code,.haroopad h1>code,.haroopad =
h2>code,.haroopad h3>code,.haroopad h4>code,.haroopad h5>code,.haroopad =
h6>code,.haroopad li>code,.haroopad p>code,.haroopad =
td>code{font-family:Consolas,"Liberation =
Mono",Menlo,Courier,monospace;font-size:85%;background-color:rgba(0,0,0,.=
02);padding:.2em .5em;border:1px solid #efefef}.haroopad =
pre>code{font-size:1em;letter-spacing:-1px;font-weight:700}.haroopad =
blockquote{border-left:4px solid #e6e6e6;padding:0 =
15px;color:#777}.haroopad table{background-color:#fafafa}.haroopad table =
tr td,.haroopad table tr th{border:1px solid #e6e6e6}.haroopad table =
tr:nth-child(2n){background-color:#f2f2f2}.hljs{display:block;overflow-x:=
auto;padding:.5em;background:#fdf6e3;color:#657b83;-webkit-text-size-adju=
st:none}.diff =
.hljs-header,.hljs-comment,.hljs-doctype,.hljs-javadoc,.hljs-pi,.lisp =
.hljs-string{color:#93a1a1}.css =
.hljs-tag,.hljs-addition,.hljs-keyword,.hljs-request,.hljs-status,.hljs-w=
inutils,.method,.nginx =
.hljs-title{color:#859900}.hljs-command,.hljs-dartdoc,.hljs-hexcolor,.hlj=
s-link_url,.hljs-number,.hljs-phpdoc,.hljs-regexp,.hljs-rules =
.hljs-value,.hljs-string,.hljs-tag .hljs-value,.tex =
.hljs-formula{color:#2aa198}.css =
.hljs-function,.hljs-built_in,.hljs-chunk,.hljs-decorator,.hljs-id,.hljs-=
identifier,.hljs-localvars,.hljs-title,.vhdl =
.hljs-literal{color:#268bd2}.hljs-attribute,.hljs-class =
.hljs-title,.hljs-constant,.hljs-link_reference,.hljs-parent,.hljs-type,.=
hljs-variable,.lisp .hljs-body,.smalltalk =
.hljs-number{color:#b58900}.css .hljs-pseudo,.diff =
.hljs-change,.hljs-attr_selector,.hljs-cdata,.hljs-header,.hljs-pragma,.h=
ljs-preprocessor,.hljs-preprocessor =
.hljs-keyword,.hljs-shebang,.hljs-special,.hljs-subst,.hljs-symbol,.hljs-=
symbol =
.hljs-string{color:#cb4b16}.hljs-deletion,.hljs-important{color:#dc322f}.=
hljs-link_label{color:#6c71c4}.tex =
.hljs-formula{background:#eee8d5}.MathJax_Hover_Frame{border-radius:.25em=
;-webkit-border-radius:.25em;-moz-border-radius:.25em;-khtml-border-radiu=
s:.25em;box-shadow:0 0 15px #83A;-webkit-box-shadow:0 0 15px =
#83A;-moz-box-shadow:0 0 15px #83A;-khtml-box-shadow:0 0 15px =
#83A;border:1px solid =
#A6D!important;display:inline-block;position:absolute}.MathJax_Hover_Arro=
w{position:absolute;width:15px;height:11px;cursor:pointer}#MathJax_About{=
position:fixed;left:50%;width:auto;text-align:center;border:3px =
outset;padding:1em =
2em;background-color:#DDD;color:#000;cursor:default;font-family:message-b=
ox;font-size:120%;font-style:normal;text-indent:0;text-transform:none;lin=
e-height:normal;letter-spacing:normal;word-spacing:normal;word-wrap:norma=
l;white-space:nowrap;float:none;z-index:201;border-radius:15px;-webkit-bo=
rder-radius:15px;-moz-border-radius:15px;-khtml-border-radius:15px;box-sh=
adow:0 10px 20px gray;-webkit-box-shadow:0 10px 20px =
gray;-moz-box-shadow:0 10px 20px gray;-khtml-box-shadow:0 10px 20px =
gray;filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, =
OffY=3D2, Color=3D'gray', =
Positive=3D'true')}.MathJax_Menu{position:absolute;background-color:#fff;=
color:#000;width:auto;padding:2px;border:1px solid =
#CCC;margin:0;cursor:default;font:menu;text-align:left;text-indent:0;text=
-transform:none;line-height:normal;letter-spacing:normal;word-spacing:nor=
mal;word-wrap:normal;white-space:nowrap;float:none;z-index:201;box-shadow=
:0 10px 20px gray;-webkit-box-shadow:0 10px 20px gray;-moz-box-shadow:0 =
10px 20px gray;-khtml-box-shadow:0 10px 20px =
gray;filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, =
OffY=3D2, Color=3D'gray', =
Positive=3D'true')}.MathJax_MenuItem{padding:2px 2em;background:0 =
0}.MathJax_MenuArrow{position:absolute;right:.5em;color:#666}.MathJax_Men=
uActive =
.MathJax_MenuArrow{color:#fff}.MathJax_MenuArrow.RTL{left:.5em;right:auto=
}.MathJax_MenuCheck{position:absolute;left:.7em}.MathJax_MenuCheck.RTL{ri=
ght:.7em;left:auto}.MathJax_MenuRadioCheck{position:absolute;left:1em}.Ma=
thJax_MenuRadioCheck.RTL{right:1em;left:auto}.MathJax_MenuLabel{padding:2=
px 2em 4px 1.33em;font-style:italic}.MathJax_MenuRule{border-top:1px =
solid #CCC;margin:4px 1px =
0}.MathJax_MenuDisabled{color:GrayText}.MathJax_MenuActive{background-col=
or:Highlight;color:HighlightText}.MathJax_Menu_Close{position:absolute;wi=
dth:31px;height:31px;top:-15px;left:-15px}#MathJax_Zoom{position:absolute=
;background-color:#F0F0F0;overflow:auto;display:block;z-index:301;padding=
:.5em;border:1px solid =
#000;margin:0;font-weight:400;font-style:normal;text-align:left;text-inde=
nt:0;text-transform:none;line-height:normal;letter-spacing:normal;word-sp=
acing:normal;word-wrap:normal;white-space:nowrap;float:none;box-shadow:5p=
x 5px 15px #AAA;-webkit-box-shadow:5px 5px 15px #AAA;-moz-box-shadow:5px =
5px 15px #AAA;-khtml-box-shadow:5px 5px 15px =
#AAA;filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, =
OffY=3D2, Color=3D'gray', =
Positive=3D'true')}#MathJax_ZoomOverlay{position:absolute;left:0;top:0;z-=
index:300;display:inline-block;width:100%;height:100%;border:0;padding:0;=
margin:0;background-color:#fff;opacity:0;filter:alpha(opacity=3D0)}#MathJ=
ax_ZoomFrame{position:relative;display:inline-block;height:0;width:0}#Mat=
hJax_ZoomEventTrap{position:absolute;left:0;top:0;z-index:302;display:inl=
ine-block;border:0;padding:0;margin:0;background-color:#fff;opacity:0;fil=
ter:alpha(opacity=3D0)}.MathJax_Preview{color:#888}#MathJax_Message{posit=
ion:fixed;left:1px;bottom:2px;background-color:#E6E6E6;border:1px solid =
#959595;margin:0;padding:2px =
8px;z-index:102;color:#000;font-size:80%;width:auto;white-space:nowrap}#M=
athJax_MSIE_Frame{position:absolute;top:0;left:0;width:0;z-index:101;bord=
er:0;margin:0;padding:0}.MathJax_Error{color:#C00;font-style:italic}.Math=
Jax_Display{text-align:center;margin:1em =
0;position:relative;display:block!important;text-indent:0;max-width:none;=
max-height:none;min-width:0;min-height:0;width:100%}.MathJax =
.merror{background-color:#FF8;color:#C00;border:1px solid =
#C00;padding:1px 3px;font-style:normal;font-size:90%}.MathJax =
.MJX-monospace{font-family:monospace}.MathJax =
.MJX-sans-serif{font-family:sans-serif}#MathJax_Tooltip{background-color:=
InfoBackground;color:InfoText;border:1px solid #000;box-shadow:2px 2px =
5px #AAA;-webkit-box-shadow:2px 2px 5px #AAA;-moz-box-shadow:2px 2px 5px =
#AAA;-khtml-box-shadow:2px 2px 5px =
#AAA;filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, =
OffY=3D2, Color=3D'gray', Positive=3D'true');padding:3px =
4px;z-index:401;position:absolute;left:0;top:0;width:auto;height:auto;dis=
play:none}.MathJax{display:inline;font-style:normal;font-weight:400;line-=
height:normal;font-size:100%;font-size-adjust:none;text-indent:0;text-ali=
gn:left;text-transform:none;letter-spacing:normal;word-spacing:normal;wor=
d-wrap:normal;white-space:nowrap;float:none;direction:ltr;max-width:none;=
max-height:none;min-width:0;min-height:0;border:0;padding:0;margin:0}.Mat=
hJax a,.MathJax img,.MathJax =
nobr{border:0;padding:0;margin:0;max-width:5000em;max-height:5000em;min-w=
idth:0;min-height:0;vertical-align:0;line-height:normal;text-decoration:n=
one}img.MathJax_strut{border:0!important;padding:0!important;margin:0!imp=
ortant;vertical-align:0!important}.MathJax =
span{display:inline;position:static;border:0;padding:0;margin:0;vertical-=
align:0;line-height:normal;text-decoration:none}.MathJax =
nobr{white-space:nowrap!important}.MathJax =
img{display:inline!important;float:none!important}.MathJax =
*{transition:none;-webkit-transition:none;-moz-transition:none;-ms-transi=
tion:none;-o-transition:none}.MathJax_Processing{visibility:hidden;positi=
on:fixed;width:0;height:0;overflow:hidden}.MathJax_Processed{display:none=
!important}.MathJax_ExBox{display:block!important;overflow:hidden;width:1=
px;height:60ex;min-height:0;max-height:none}.MathJax =
.MathJax_EmBox{display:block!important;overflow:hidden;width:1px;height:6=
0em;min-height:0;max-height:none}.MathJax =
.MathJax_HitBox{cursor:text;background:#fff;opacity:0;filter:alpha(opacit=
y=3D0)}#MathJax_Tooltip *,.MathJax .MathJax_HitBox =
*{filter:none;opacity:1;background:0 =
0}@font-face{font-family:MathJax_Main;src:url(file:///C:/Program%20Files/=
Haroopad/Libraries/.js/MathJax/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regul=
ar.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?rev=3D2.4-beta-2) =
format('opentype')}@font-face{font-family:MathJax_Main;src:url(file:///C:=
/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/HTML-CSS/TeX/woff/M=
athJax_Main-Bold.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?rev=3D2.4-beta-2) =
format('opentype');font-weight:700}@font-face{font-family:MathJax_Main;sr=
c:url(file:///C:/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/HTM=
L-CSS/TeX/woff/MathJax_Main-Italic.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?rev=3D2.4-beta-2) =
format('opentype');font-style:italic}@font-face{font-family:MathJax_Math;=
src:url(file:///C:/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/H=
TML-CSS/TeX/woff/MathJax_Math-Italic.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?rev=3D2.4-beta-2) =
format('opentype');font-style:italic}@font-face{font-family:MathJax_Calig=
raphic;src:url(file:///C:/Program%20Files/Haroopad/Libraries/.js/MathJax/=
fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?rev=3D2.4-beta-2=
) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?rev=3D2.4-beta=
-2) =
format('opentype')}@font-face{font-family:MathJax_Size1;src:url(file:///C=
:/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/HTML-CSS/TeX/woff/=
MathJax_Size1-Regular.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?rev=3D2.4-beta-2) =
format('opentype')}@font-face{font-family:MathJax_Size2;src:url(file:///C=
:/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/HTML-CSS/TeX/woff/=
MathJax_Size2-Regular.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?rev=3D2.4-beta-2) =
format('opentype')}@font-face{font-family:MathJax_Size3;src:url(file:///C=
:/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/HTML-CSS/TeX/woff/=
MathJax_Size3-Regular.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?rev=3D2.4-beta-2) =
format('opentype')}@font-face{font-family:MathJax_Size4;src:url(file:///C=
:/Program%20Files/Haroopad/Libraries/.js/MathJax/fonts/HTML-CSS/TeX/woff/=
MathJax_Size4-Regular.woff?rev=3D2.4-beta-2) =
format('woff'),url(file:///C:/Program%20Files/Haroopad/Libraries/.js/Math=
Jax/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?rev=3D2.4-beta-2) =
format('opentype')}.MathJax =
.noError{font-size:90%;text-align:left;color:#000;padding:1px =
3px;border:1px =
solid}footer{position:fixed;font-size:.8em;text-align:right;bottom:0;marg=
in-left:-25px;height:20px;width:100%}</STYLE>
 </HEAD>=20
<BODY class=3D"markdown haroopad">
<HR class=3D"section">

<H1 id=3D"quick-revise"><A name=3D"quick-revise" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#quick-revise"></A>Quick=20
Revise</H1>
<P class=3D"toc"></P>
<UL>
  <LI>
  <UL>
    <LI><SPAN class=3D"title"><A title=3D"Algorithms" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#algorithms">Algorithms</A>=20
    </SPAN> <!--span class=3D"number">=0A=
0=0A=
</span-->=20
    <UL>
      <LI><SPAN class=3D"title"><A title=3D"STL" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#stl">STL</A>=20
      </SPAN> <!--span class=3D"number">=0A=
1=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Sort" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#sort">Sort</A>=20
      </SPAN> <!--span class=3D"number">=0A=
2=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Divide and Conquer" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#divide-and-conquer">Divide=20
      and Conquer</A> </SPAN> <!--span class=3D"number">=0A=
3=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"DP" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#dp">DP</A>=20
      </SPAN> <!--span class=3D"number">=0A=
4=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Backtrack" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#backtrack">Backtrack</A>=20
      </SPAN> <!--span class=3D"number">=0A=
5=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"BitOps" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#bitops">BitOps</A>=20
      </SPAN> <!--span class=3D"number">=0A=
6=0A=
</span--> </LI></UL></LI>
    <LI><SPAN class=3D"title"><A title=3D"Data Structures" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#data-structures">Data=20
    Structures</A> </SPAN> <!--span class=3D"number">=0A=
7=0A=
</span-->=20
    <UL>
      <LI><SPAN class=3D"title"><A title=3D"List" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#list">List</A>=20
      </SPAN> <!--span class=3D"number">=0A=
8=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Circular Queue" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#circular-queue">Circular=20
      Queue</A> </SPAN> <!--span class=3D"number">=0A=
9=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Linked List" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#linked-list">Linked=20
      List</A> </SPAN> <!--span class=3D"number">=0A=
10=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Tree" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#tree">Tree</A>=20
      </SPAN> <!--span class=3D"number">=0A=
11=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"String" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#string">String</A>=20
      </SPAN> <!--span class=3D"number">=0A=
12=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Hash" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#hash">Hash</A>=20
      </SPAN> <!--span class=3D"number">=0A=
13=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Heap" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#heap">Heap</A>=20
      </SPAN> <!--span class=3D"number">=0A=
14=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Graph" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#graph">Graph</A>=20
      </SPAN> <!--span class=3D"number">=0A=
15=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Probabilistic DS" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#probabilistic-ds">Probabilistic=20
      DS</A> </SPAN> <!--span class=3D"number">=0A=
16=0A=
</span--> </LI></UL></LI>
    <LI><SPAN class=3D"title"><A title=3D"Math" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#math">Math</A>=20
    </SPAN> <!--span class=3D"number">=0A=
17=0A=
</span-->=20
    <UL>
      <LI><SPAN class=3D"title"><A title=3D"LCM and GCD" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#lcm-and-gcd">LCM=20
      and GCD</A> </SPAN> <!--span class=3D"number">=0A=
18=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Sampling" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#sampling">Sampling</A>=20
      </SPAN> <!--span class=3D"number">=0A=
19=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Leader Election" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#leader-election">Leader=20
      Election</A> </SPAN> <!--span class=3D"number">=0A=
20=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Shuffle" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#shuffle">Shuffle</A>=20
      </SPAN> <!--span class=3D"number">=0A=
21=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Permutate" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#permutate">Permutate</A>=20
      </SPAN> <!--span class=3D"number">=0A=
22=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Prime Number Generation" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#prime-number-generation">Prime=20
      Number Generation</A> </SPAN> <!--span class=3D"number">=0A=
23=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Rotate Array" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#rotate-array">Rotate=20
      Array</A> </SPAN> <!--span class=3D"number">=0A=
24=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Random Sampling - Reservoir =
sampling"=20
      =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#random-sampling---reservoir-sampling">Random=20
      Sampling - Reservoir sampling</A> </SPAN> <!--span =
class=3D"number">=0A=
25=0A=
</span-->=20
      </LI>
      <LI><SPAN class=3D"title"><A title=3D"Probability" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#probability">Probability</A>=20
      </SPAN> <!--span class=3D"number">=0A=
26=0A=
</span--> </LI></UL></LI>
    <LI><SPAN class=3D"title"><A title=3D"Networking" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#networking">Networking</A>=20
    </SPAN> <!--span class=3D"number">=0A=
27=0A=
</span-->=20
    <UL>
      <LI><SPAN class=3D"title"><A title=3D"Terms" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#terms">Terms</A>=20
      </SPAN> <!--span class=3D"number">=0A=
28=0A=
</span--> </LI></UL></LI>
    <LI><SPAN class=3D"title"><A title=3D"Performance" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#performance">Performance</A>=20
    </SPAN> <!--span class=3D"number">=0A=
29=0A=
</span--> </LI>
    <LI><SPAN class=3D"title"><A title=3D"Language (C/C++/Python)" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#language-(c/c++/python)">Language=20
    (C/C++/Python)</A> </SPAN> <!--span class=3D"number">=0A=
30=0A=
</span--> </LI>
    <LI><SPAN class=3D"title"><A title=3D"OS" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#os">OS</A>=20
    </SPAN> <!--span class=3D"number">=0A=
31=0A=
</span-->=20
    <UL>
      <LI><SPAN class=3D"title"><A title=3D"Process" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#process">Process</A>=20
      </SPAN> <!--span class=3D"number">=0A=
32=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Kernel" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#kernel">Kernel</A>=20
      </SPAN> <!--span class=3D"number">=0A=
33=0A=
</span--> </LI></UL></LI>
    <LI><SPAN class=3D"title"><A title=3D"Design" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#design">Design</A>=20
    </SPAN> <!--span class=3D"number">=0A=
34=0A=
</span-->=20
    <UL>
      <LI><SPAN class=3D"title"><A title=3D"Event-Driven Framework" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#event-driven-framework">Event-Driven=20
      Framework</A> </SPAN> <!--span class=3D"number">=0A=
35=0A=
</span--> </LI>
      <LI><SPAN class=3D"title"><A title=3D"Endianness" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#endianness">Endianness</A>=20
      </SPAN> <!--span class=3D"number">=0A=
36=0A=
</span--> </LI></UL></LI></UL></LI></UL>
<P></P>
<HR class=3D"section">

<H2 id=3D"algorithms"><A name=3D"algorithms" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#algorithms"></A>Algorithms</H2>
<H3 id=3D"stl"><A name=3D"stl" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#stl"></A>STL</H3>
<UL>
  <LI>Fill vector with contents:
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D"<pre><code =
class=3D&quot;CPP&quot;>/* Populate a vector with characters from A - Z =
*/&#10;std::vector&amp;lt;char&amp;gt; =
table(26);&#10;std::iota(table.begin(), table.end(), 'A');&#10;/* Fill a =
vector with 0, 1, ..., 99             =
*/&#10;std::vector&amp;lt;int&amp;gt; v(100) ; // vector with 100 =
ints.&#10;std::iota (std::begin(v), std::end(v), 0);&#10;/* O(n) Shuffle =
needed for quick-select perf guarantee    */&#10;std::shuffle(a.begin(), =
a.end(), std::default_random_engine{});&#10;/* Reverse the entire string =
including spaces   */&#10;std::reverse(s.begin(), s.end());&#10;/* =
Priority Queue usage:                        =
*/&#10;priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, =
std::greater&amp;lt;int&amp;gt;&amp;gt; =
min_heap;&#10;priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, =
std::less&amp;lt;int&amp;gt;&amp;gt;    max_heap; /* Default =
*/&#10;min_heap.top();   min_heap.pop();&#10;</code></pre>"><SPAN =
class=3D"hljs-comment">/* Populate a vector with characters from A - Z =
*/</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">char</SPAN>&gt; table(<SPAN =
class=3D"hljs-number">26</SPAN>);=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::iota(table.begin(), =
table.end(), <SPAN class=3D"hljs-string">'A'</SPAN>);=0A=
<SPAN class=3D"hljs-comment">/* Fill a vector with 0, 1, ..., 99         =
    */</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; v(<SPAN =
class=3D"hljs-number">100</SPAN>) ; <SPAN class=3D"hljs-comment">// =
vector with 100 ints.</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::iota (<SPAN =
class=3D"hljs-built_in">std</SPAN>::begin(v), <SPAN =
class=3D"hljs-built_in">std</SPAN>::end(v), <SPAN =
class=3D"hljs-number">0</SPAN>);=0A=
<SPAN class=3D"hljs-comment">/* O(n) Shuffle needed for quick-select =
perf guarantee    */</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::shuffle(a.begin(), a.end(), =
<SPAN class=3D"hljs-built_in">std</SPAN>::default_random_engine{});=0A=
<SPAN class=3D"hljs-comment">/* Reverse the entire string including =
spaces   */</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::reverse(s.begin(), s.end());=0A=
<SPAN class=3D"hljs-comment">/* Priority Queue usage:                    =
    */</SPAN>=0A=
priority_queue&lt;<SPAN class=3D"hljs-keyword">int</SPAN>, <SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;, <SPAN =
class=3D"hljs-built_in">std</SPAN>::greater&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt; min_heap;=0A=
priority_queue&lt;<SPAN class=3D"hljs-keyword">int</SPAN>, <SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;, <SPAN =
class=3D"hljs-built_in">std</SPAN>::less&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt;    max_heap; <SPAN =
class=3D"hljs-comment">/* Default */</SPAN>=0A=
min_heap.top();   min_heap.pop();=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"sort"><A name=3D"sort" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#sort"></A>Sort</H3>
<UL>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Algo/CS_Sort.h=
tml#overview">Taken=20
  from sort overview</A>, to sort n items, the lower bound itself is =
<SPAN><SPAN=20
  class=3D"MathJax_Preview"></SPAN><SPAN class=3D"MathJax" =
id=3D"MathJax-Element-1-Frame"=20
  role=3D"textbox" aria-readonly=3D"true"><NOBR><SPAN class=3D"math" =
id=3D"MathJax-Span-1"=20
  style=3D"width: 0.95em; display: inline-block;"><SPAN style=3D"width: =
0.76em; height: 0px; font-size: 122%; display: inline-block; position: =
relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.81em, 1000em, 2.84em, -0.44em);"><SPAN=20
  class=3D"mrow" id=3D"MathJax-Span-2"><SPAN class=3D"mi" =
id=3D"MathJax-Span-3" style=3D"font-family: =
MathJax_Main;">=CE=A9</SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.67em; display: =
inline-block;"></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 0.99em; overflow: hidden; vertical-align: =
-0.06em; border-left-width: 0em; border-left-style: solid; display: =
inline-block;"></SPAN></SPAN></NOBR></SPAN>
<SCRIPT id=3D"MathJax-Element-1" type=3D"math/tex">\Omega</SCRIPT>
  </SPAN>(n lgn) considering #compares.=20
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Sort Algorithm</TH>
      <TH style=3D"text-align: center;">Best-case Time Complexity</TH>
      <TH style=3D"text-align: center;">Worst-case Time Complexity</TH>
      <TH style=3D"text-align: center;">Average Time Complexity</TH>
      <TH style=3D"text-align: center;">Worst-case Space Complexity</TH>
      <TH style=3D"text-align: center;">Is Stable-Sort</TH>
      <TH style=3D"text-align: center;">Is In-Place sort</TH>
      <TH style=3D"text-align: left;">Notes</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;">Merge Sort</TD>
      <TD style=3D"text-align: center;">O(nlgn)</TD>
      <TD style=3D"text-align: center;">O(nlgn)</TD>
      <TD style=3D"text-align: center;">O(nlgn)</TD>
      <TD style=3D"text-align: center;"><STRONG>O(n)</STRONG></TD>
      <TD style=3D"text-align: center;">Yes</TD>
      <TD style=3D"text-align: center;">No</TD>
      <TD style=3D"text-align: left;">Guaranteed linearithmic =
performance and a=20
        stable sort</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">Heap Sort</TD>
      <TD style=3D"text-align: center;">O(nlgn)</TD>
      <TD style=3D"text-align: center;">2*O(nlgn)</TD>
      <TD style=3D"text-align: center;">2*O(nlgn)</TD>
      <TD style=3D"text-align: center;">O(1)</TD>
      <TD style=3D"text-align: center;"><STRONG>No</STRONG></TD>
      <TD style=3D"text-align: center;">Yes</TD>
      <TD style=3D"text-align: left;">Guaranteed linearithmic =
performance and=20
        in-place sort</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">Quick Sort</TD>
      <TD style=3D"text-align: center;">O(nlgn)</TD>
      <TD style=3D"text-align: center;">O(<SPAN><SPAN=20
        class=3D"MathJax_Preview"></SPAN><SPAN class=3D"MathJax" =
id=3D"MathJax-Element-2-Frame"=20
        role=3D"textbox" aria-readonly=3D"true"><NOBR><SPAN =
class=3D"math" id=3D"MathJax-Span-4"=20
        style=3D"width: 1.35em; display: inline-block;"><SPAN =
style=3D"width: 1.09em; height: 0px; font-size: 122%; display: =
inline-block; position: relative;"><SPAN=20
        style=3D"left: 0em; top: -2.18em; position: absolute; clip: =
rect(1.18em, 1000em, 2.36em, -0.47em);"><SPAN=20
        class=3D"mrow" id=3D"MathJax-Span-5"><SPAN class=3D"msubsup" =
id=3D"MathJax-Span-6"><SPAN=20
        style=3D"width: 1.05em; height: 0px; display: inline-block; =
position: relative;"><SPAN=20
        style=3D"left: 0em; top: -2.45em; position: absolute; clip: =
rect(1.85em, 1000em, 2.63em, -0.47em);"><SPAN=20
        class=3D"mi" id=3D"MathJax-Span-7" style=3D"font-family: =
MathJax_Math; font-style: italic;">n</SPAN><SPAN=20
        style=3D"width: 0px; height: 2.45em; display: =
inline-block;"></SPAN></SPAN><SPAN=20
        style=3D"left: 0.6em; top: -2.71em; position: absolute;"><SPAN =
class=3D"mn"=20
        id=3D"MathJax-Span-8"=20
        style=3D"font-family: MathJax_Main; font-size: =
70.7%;">2</SPAN><SPAN=20
        style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN=20
        style=3D"width: 0px; height: 2.18em; display: =
inline-block;"></SPAN></SPAN></SPAN><SPAN=20
        style=3D"width: 0px; height: 1.16em; overflow: hidden; =
vertical-align: -0.08em; border-left-width: 0em; border-left-style: =
solid; display: inline-block;"></SPAN></SPAN></NOBR></SPAN>
<SCRIPT id=3D"MathJax-Element-2" type=3D"math/tex">n^2</SCRIPT>
        </SPAN>)</TD>
      <TD style=3D"text-align: center;">2*O(nlgn)</TD>
      <TD style=3D"text-align: center;">O(1)</TD>
      <TD style=3D"text-align: center;"><STRONG>No</STRONG></TD>
      <TD style=3D"text-align: center;">Yes</TD>
      <TD style=3D"text-align: left;">Probabilistic linearithmic =
performance.=20
        Typically Faster (than mergesort) in =
practice</TD></TR></TBODY></TABLE></LI>
  <LI>
  <P>Note: <A href=3D"https://en.wikipedia.org/wiki/Timsort">Timsort</A> =
is a=20
  stable sorting algorithm that uses merge-sort and insertion-sort. It =
takes=20
  linear time to recognize and sort an array whose two-halfs are already =
sorted=20
  (example merge step of a merge sort). This is used in Python sorted()=20
  function.</P></LI>
  <LI>
  <P>QuickSelect</P>
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/alg=
o_sort_quick_select.cc#L26&#10;/* Chose a[0] as pivot and find the =
sorted pos (0-based) idx *&#10; * of the pivot. Also, move the pivot to =
its sorted position *&#10; * Time Complexity =3D O(n)      Space =
Complexity =3D O(1)       */&#10; int =
partition(std::vector&amp;lt;int&amp;gt; &amp;amp;a, int left, int =
right) {&#10;    int pivot =3D a[left];  /* chose pivot as the 1st =
element   */&#10;    int r =3D right;&#10;    for(int l =3D left + 1; l =
&amp;lt;=3D r; ) {&#10;       if     (a[l] &amp;lt;=3D pivot) l++; /* =
Move l if a[l] &amp;lt; pivot  */&#10;       else if(a[r] &amp;gt;=3D =
pivot) r--; /* Move r if a[r] &amp;gt; pivot  */&#10;       /* a[l] =
&amp;gt; pivot and a[r] &amp;lt; pivot, so swap both elems   */&#10;     =
  else                   std::swap(a[l++], a[r--]);&#10;    }&#10;    =
std::swap(a[left], a[r]); /* Swap pivot to its correct pos*/&#10;    =
return r;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/algo_sort_quick_select.cc#L26</SPAN>=0A=
<SPAN class=3D"hljs-comment">/* Chose a[0] as pivot and find the sorted =
pos (0-based) idx *=0A=
 * of the pivot. Also, move the pivot to its sorted position *=0A=
 * Time Complexity =3D O(n)      Space Complexity =3D O(1)       =
*/</SPAN>=0A=
 <SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">partition</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; &amp;a, <SPAN =
class=3D"hljs-keyword">int</SPAN> left, <SPAN =
class=3D"hljs-keyword">int</SPAN> right)</SPAN> </SPAN>{=0A=
    <SPAN class=3D"hljs-keyword">int</SPAN> pivot =3D a[left];  <SPAN =
class=3D"hljs-comment">/* chose pivot as the 1st element   */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">int</SPAN> r =3D right;=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> l =3D left + <SPAN =
class=3D"hljs-number">1</SPAN>; l &lt;=3D r; ) {=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>     (a[l] &lt;=3D pivot) =
l++; <SPAN class=3D"hljs-comment">/* Move l if a[l] &lt; pivot  */</SPAN>=0A=
       <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(a[r] &gt;=3D =
pivot)</SPAN> r--</SPAN>; <SPAN class=3D"hljs-comment">/* Move r if a[r] =
&gt; pivot  */</SPAN>=0A=
       <SPAN class=3D"hljs-comment">/* a[l] &gt; pivot and a[r] &lt; =
pivot, so swap both elems   */</SPAN>=0A=
       <SPAN class=3D"hljs-keyword">else</SPAN>                   <SPAN =
class=3D"hljs-built_in">std</SPAN>::swap(a[l++], a[r--]);=0A=
    }=0A=
    <SPAN class=3D"hljs-built_in">std</SPAN>::swap(a[left], a[r]); <SPAN =
class=3D"hljs-comment">/* Swap pivot to its correct pos*/</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">return</SPAN> r;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Meeting rooms - Given array of meetings, what is the minimum =
#meeting=20
  rooms needed ?
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/alg=
o_sort_meeting_rooms_ii.cc#L28&#10;struct Interval { int start; int end; =
}&#10;/* Custom comparator (min-heap) */&#10;struct less_than_start =
{&#10;   inline bool operator() (const Interval&amp;amp; a, const =
Interval&amp;amp; b) { return (a.start &amp;lt; b.start); =
}&#10;};&#10;int minMeetingRooms(vector&amp;lt;Interval&amp;gt;&amp;amp; =
intervals) {&#10;   if(intervals.size() =3D=3D 0) return 0;  /* Handle =
cornercase */ &#10;   /* Sort intervals based on start time              =
       */&#10;   std::sort(intervals.begin(), intervals.end(), =
less_than_start());&#10;   /* Maintain PQ to find out which room is free =
next        */&#10;   priority_queue&amp;lt;int, =
vector&amp;lt;int&amp;gt;, std::greater&amp;lt;int&amp;gt;&amp;gt; =
min_end_pq;&#10;   /* Schedule first interval into the first room-base =
case  */&#10;   min_end_pq.push(intervals[0].end);&#10;   for(int i =3D =
1; i &amp;lt; intervals.size(); ++i) {&#10;      /* Greedy scheduling: =
if current interval does not     *&#10;       * overlap with oldest =
classroom (oldest end-time)     *&#10;       * schedule this interval on =
that classroom            */&#10;      if(intervals[i].start &amp;gt;=3D =
min_end_pq.top())&#10;         min_end_pq.pop(); /* clear up old =
classroom         */&#10;      /* schedule new interval regardless       =
             */&#10;      min_end_pq.push(intervals[i].end);&#10;   =
}&#10;   /* Return number of classrooms                            =
*/&#10;   return min_end_pq.size();&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/algo_sort_meeting_rooms_ii.cc#L28</SPAN>=0A=
<SPAN class=3D"hljs-keyword">struct</SPAN> Interval { <SPAN =
class=3D"hljs-keyword">int</SPAN> start; <SPAN =
class=3D"hljs-keyword">int</SPAN> end; }=0A=
<SPAN class=3D"hljs-comment">/* Custom comparator (min-heap) */</SPAN>=0A=
<SPAN class=3D"hljs-keyword">struct</SPAN> less_than_start {=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">inline</SPAN> <SPAN =
class=3D"hljs-keyword">bool</SPAN> <SPAN =
class=3D"hljs-title">operator</SPAN><SPAN =
class=3D"hljs-params">()</SPAN> <SPAN class=3D"hljs-params">(<SPAN =
class=3D"hljs-keyword">const</SPAN> Interval&amp; a, <SPAN =
class=3D"hljs-keyword">const</SPAN> Interval&amp; b)</SPAN> </SPAN>{ =
<SPAN class=3D"hljs-keyword">return</SPAN> (a.start &lt; b.start); }=0A=
};=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">minMeetingRooms</SPAN><SPAN =
class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;Interval&gt;&amp; =
intervals)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(intervals.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-number">0</SPAN>;  <SPAN class=3D"hljs-comment">/* Handle =
cornercase */</SPAN> =0A=
   <SPAN class=3D"hljs-comment">/* Sort intervals based on start time    =
                 */</SPAN>=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::sort(intervals.begin(), =
intervals.end(), less_than_start());=0A=
   <SPAN class=3D"hljs-comment">/* Maintain PQ to find out which room is =
free next        */</SPAN>=0A=
   priority_queue&lt;<SPAN class=3D"hljs-keyword">int</SPAN>, <SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;, <SPAN =
class=3D"hljs-built_in">std</SPAN>::greater&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt; min_end_pq;=0A=
   <SPAN class=3D"hljs-comment">/* Schedule first interval into the =
first room-base case  */</SPAN>=0A=
   min_end_pq.push(intervals[<SPAN class=3D"hljs-number">0</SPAN>].end);=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">1</SPAN>; i &lt; intervals.size(); ++i) {=0A=
      <SPAN class=3D"hljs-comment">/* Greedy scheduling: if current =
interval does not     *=0A=
       * overlap with oldest classroom (oldest end-time)     *=0A=
       * schedule this interval on that classroom            */</SPAN>=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(intervals[i].start &gt;=3D =
min_end_pq.top())=0A=
         min_end_pq.pop(); <SPAN class=3D"hljs-comment">/* clear up old =
classroom         */</SPAN>=0A=
      <SPAN class=3D"hljs-comment">/* schedule new interval regardless   =
                 */</SPAN>=0A=
      min_end_pq.push(intervals[i].end);=0A=
   }=0A=
   <SPAN class=3D"hljs-comment">/* Return number of classrooms           =
                 */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> min_end_pq.size();=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Count smaller elements after self:
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D"<pre><code =
class=3D&quot;CPP&quot;>//https://github.com/prashrock/CPP/blob/master/le=
etcode/algo_sort_num_smaller_elements_in_right.cc#L35&#10;/** STL BST =
based approach using STL Multiset (duplicates)   *&#10; * Time =
Complexity =3D O(n^2).   Space Complexity =3D O(n)       *&#10; * Note: =
Multiset's iterators aren't random access iterators *&#10; * causing =
std::distance to be O(n) complexity               =
*/&#10;vector&amp;lt;int&amp;gt; =
countSmaller1(vector&amp;lt;int&amp;gt;&amp;amp; nums) {&#10;   =
multiset&amp;lt;int&amp;gt; ms;&#10;   vector&amp;lt;int&amp;gt; =
ans(nums.size(), 0);&#10;   /*insert each number, calculate distance =
&amp;amp; store it in ans*/&#10;   for(int i =3D nums.size()-1; i =
&amp;gt;=3D 0; i--) {&#10;      auto it =3D std::lower_bound(ms.begin(), =
ms.end(), nums[i]);&#10;      ans[i] =3D std::distance(ms.begin(), =
it);&#10;      ms.insert(nums[i]);&#10;   }&#10;   return =
ans;&#10;}&#10;</code></pre>"><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/algo_sort_num_smaller_elements_in_right.cc#L35</SPAN>=0A=
<SPAN class=3D"hljs-comment">/** STL BST based approach using STL =
Multiset (duplicates)   *=0A=
 * Time Complexity =3D O(n^2).   Space Complexity =3D O(n)       *=0A=
 * Note: Multiset's iterators aren't random access iterators *=0A=
 * causing std::distance to be O(n) complexity               */</SPAN>=0A=
<SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; countSmaller1(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums) {=0A=
   <SPAN class=3D"hljs-built_in">multiset</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; ms;=0A=
   <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; ans(nums.size(), <SPAN =
class=3D"hljs-number">0</SPAN>);=0A=
   <SPAN class=3D"hljs-comment">/*insert each number, calculate distance =
&amp; store it in ans*/</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D nums.size()-<SPAN =
class=3D"hljs-number">1</SPAN>; i &gt;=3D <SPAN =
class=3D"hljs-number">0</SPAN>; i--) {=0A=
      <SPAN class=3D"hljs-keyword">auto</SPAN> it =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::lower_bound(ms.begin(), ms.end(), =
nums[i]);=0A=
      ans[i] =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::distance(ms.begin(), it);=0A=
      ms.insert(nums[i]);=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> ans;=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"divide-and-conquer"><A name=3D"divide-and-conquer" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#divide-and-conquer"></A>Divide=20
and Conquer</H3>
<UL>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Algo/CS_Algo.h=
tml#master-method">Masters=20
  method</A>
  <UL>=20
    <LI>a =3D number of recursive calls (&gt;=3D1)</LI>
    <LI>b =3D input size shrinkage factor (&gt;1)</LI>
    <LI>d =3D exponent in combine step (outside of recursive calls)=20
  (&gt;=3D0)</LI></UL></LI>
  <LI>Lower-bound and Upper-bound
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Lower Bound</TH>
      <TH style=3D"text-align: left;">Upper Bound</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;">Lower bound returns an iterator =
pointing=20
        to the first element in the range [first,last) that is =
<STRONG>not=20
        less</STRONG> than value. <BR> Note: If *it!=3Dnum, we have =
bigger#, so go=20
        back</TD>
      <TD style=3D"text-align: left;">Upper bound returns an iterator =
pointing=20
        to the first element in the range [first,last) that is=20
        <STRONG>greater</STRONG> than =
value.</TD></TR></TBODY></TABLE></LI>
  <LI>Search Range (find the lowest and highest index of a target in a =
vector)
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/alg=
o_dc_equal_range.cc#L50&#10;/** Use Binary Search to calculate lb and ub =
              *&#10; * Time Complexity =3D O(lg n).   Space Complexity =
=3D O(1)    */&#10; vector&amp;lt;int&amp;gt; =
searchRangeBS(vector&amp;lt;int&amp;gt;&amp;amp; num, int t) {&#10;    =
vector&amp;lt;int&amp;gt; v =3D {-1, -1};&#10;    int b, e, N =3D =
num.size();&#10;    if(num.size() =3D=3D 0)            return v;&#10;    =
/* First find the lower bound (almost equivalent to BS)   */&#10;    =
for(b =3D 0, e =3D N - 1; b &amp;lt;=3D e; ) {&#10;       int mid =3D b =
+ (e - b) / 2;&#10;       if(num[mid] &amp;lt; t)            b =3D mid + =
1;&#10;       else                        e =3D mid - 1;&#10;    }&#10;  =
  /* If no LB, there can be no UB                           */&#10;    =
if(b &amp;lt; N &amp;amp;&amp;amp; num[b] =3D=3D t)       v[0] =3D =
b;&#10;    else                           return v;&#10;    /* Second, =
find the UB                                    */&#10;    for(e =3D N - =
1; b &amp;lt;=3D e; ) {&#10;       int mid =3D b + (e - b) / 2;&#10;     =
  if(num[mid] &amp;gt; t)            e =3D mid - 1;&#10;       else      =
                  b =3D mid + 1;&#10;    }&#10;    v[1] =3D e;&#10;    =
return v;&#10; }&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/algo_dc_equal_range.cc#L50</SPAN>=0A=
<SPAN class=3D"hljs-comment">/** Use Binary Search to calculate lb and =
ub               *=0A=
 * Time Complexity =3D O(lg n).   Space Complexity =3D O(1)    */</SPAN>=0A=
 <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; searchRangeBS(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; num, <SPAN =
class=3D"hljs-keyword">int</SPAN> t) {=0A=
    <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; v =3D {-<SPAN =
class=3D"hljs-number">1</SPAN>, -<SPAN class=3D"hljs-number">1</SPAN>};=0A=
    <SPAN class=3D"hljs-keyword">int</SPAN> b, e, N =3D num.size();=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(num.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>)            <SPAN =
class=3D"hljs-keyword">return</SPAN> v;=0A=
    <SPAN class=3D"hljs-comment">/* First find the lower bound (almost =
equivalent to BS)   */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(b =3D <SPAN =
class=3D"hljs-number">0</SPAN>, e =3D N - <SPAN =
class=3D"hljs-number">1</SPAN>; b &lt;=3D e; ) {=0A=
       <SPAN class=3D"hljs-keyword">int</SPAN> mid =3D b + (e - b) / =
<SPAN class=3D"hljs-number">2</SPAN>;=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(num[mid] &lt; t)           =
 b =3D mid + <SPAN class=3D"hljs-number">1</SPAN>;=0A=
       <SPAN class=3D"hljs-keyword">else</SPAN>                        e =
=3D mid - <SPAN class=3D"hljs-number">1</SPAN>;=0A=
    }=0A=
    <SPAN class=3D"hljs-comment">/* If no LB, there can be no UB         =
                  */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(b &lt; N &amp;&amp; num[b] =
=3D=3D t)       v[<SPAN class=3D"hljs-number">0</SPAN>] =3D b;=0A=
    <SPAN class=3D"hljs-keyword">else</SPAN>                           =
<SPAN class=3D"hljs-keyword">return</SPAN> v;=0A=
    <SPAN class=3D"hljs-comment">/* Second, find the UB                  =
                  */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(e =3D N - <SPAN =
class=3D"hljs-number">1</SPAN>; b &lt;=3D e; ) {=0A=
       <SPAN class=3D"hljs-keyword">int</SPAN> mid =3D b + (e - b) / =
<SPAN class=3D"hljs-number">2</SPAN>;=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(num[mid] &gt; t)           =
 e =3D mid - <SPAN class=3D"hljs-number">1</SPAN>;=0A=
       <SPAN class=3D"hljs-keyword">else</SPAN>                        b =
=3D mid + <SPAN class=3D"hljs-number">1</SPAN>;=0A=
    }=0A=
    v[<SPAN class=3D"hljs-number">1</SPAN>] =3D e;=0A=
    <SPAN class=3D"hljs-keyword">return</SPAN> v;=0A=
 }=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"dp"><A name=3D"dp" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#dp"></A>DP</H3>
<UL>
  <LI>Subset sum
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/alg=
o_dp_subset_sum.cc#L31&#10;int =
coinChangeDP(std::vector&amp;lt;int&amp;gt;&amp;amp; coins, int amt) =
{&#10;   int maxAmt =3D amt + 1; /* assume amt !=3D =
limits&amp;lt;int&amp;gt;::max() */&#10;   =
std::vector&amp;lt;int&amp;gt; dp(amt + 1, maxAmt);&#10;   dp[0] =3D =
0;&#10;   for(int n =3D 1; n &amp;lt;=3D amt; ++n) {&#10;       for(auto =
c : coins)&#10;           if(c &amp;lt;=3D n) dp[n] =3D std::min(dp[n], =
dp[n-c] + 1);&#10;   }&#10;   if(dp[amt] &amp;gt; amt)   return -1;&#10; =
  else                return dp[amt];&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/algo_dp_subset_sum.cc#L31</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">coinChangeDP</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; coins, <SPAN =
class=3D"hljs-keyword">int</SPAN> amt)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> maxAmt =3D amt + <SPAN =
class=3D"hljs-number">1</SPAN>; <SPAN class=3D"hljs-comment">/* assume =
amt !=3D limits&lt;int&gt;::max() */</SPAN>=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; dp(amt + <SPAN =
class=3D"hljs-number">1</SPAN>, maxAmt);=0A=
   dp[<SPAN class=3D"hljs-number">0</SPAN>] =3D <SPAN =
class=3D"hljs-number">0</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> n =3D <SPAN =
class=3D"hljs-number">1</SPAN>; n &lt;=3D amt; ++n) {=0A=
       <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">auto</SPAN> c : coins)=0A=
           <SPAN class=3D"hljs-keyword">if</SPAN>(c &lt;=3D n) dp[n] =3D =
<SPAN class=3D"hljs-built_in">std</SPAN>::min(dp[n], dp[n-c] + <SPAN =
class=3D"hljs-number">1</SPAN>);=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(dp[amt] &gt; amt)   <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">else</SPAN>                <SPAN =
class=3D"hljs-keyword">return</SPAN> dp[amt];=0A=
}=0A=
</CODE></PRE>
  <UL>
    <LI>Note there is a nice BFS based solution for this in Github as=20
  well.</LI></UL></LI>
  <LI>Longest Increasing Subsequence
  <UL>
    <LI>Find length of longest non-contiguous increasing sequence in =
unsorted=20
    array. Ex.[10, 9, 2, 5, 3, 7, 101, 18], return 4 for [2, 3, 7, =
101]</LI>
    <LI>This is solved <A =
href=3D"https://github.com/prashrock/CPP/blob/master/leetcode/algo_dp_lon=
gest_increasing_subsequence.cc">here</A>
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">/* O(n^2) DP algorithm */&#10;int =
DP_lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) {&#10;    int =
max_len =3D 1;&#10;    vector&amp;lt;int&amp;gt; dp(nums.size(), =
1);&#10;    for(int i =3D 0; i &amp;lt; nums.size(); ++i) {&#10;        =
for(int j =3D 0; j &amp;lt; i; ++j) {&#10;            if(nums[i] =
&amp;gt; nums[j])&#10;                dp[i] =3D std::max(dp[i], dp[j] + =
1);&#10;        }&#10;        max_len =3D std::max(max_len, dp[i]);&#10; =
   }&#10;    return max_len;&#10;}&#10;/* O(nlgn) Patience Sort =
algorithm           *&#10; * Only store the last element in each =
group.*/&#10;int =
PatienceSortBased_lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) =
{&#10;    vector&amp;lt;int&amp;gt; v;&#10;    =
v.push_back(nums[0]);&#10;    for(int i =3D 1; i &amp;lt; nums.size(); =
++i) {&#10;        if(nums[i] &amp;lt; v[0]) v[0] =3D nums[i];&#10;      =
  else {&#10;            auto it  =3D std::lower_bound(v.begin(), =
v.end(), nums[i]);&#10;            if(it =3D=3D v.end()) =
v.push_back(nums[i]);&#10;            else              *it =3D =
nums[i];&#10;        }&#10;    }&#10;    return =
v.size();&#10;}&#10;</code></pre>'><SPAN class=3D"hljs-comment">/* =
O(n^2) DP algorithm */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">DP_lengthOfLIS</SPAN><SPAN =
class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums)</SPAN> </SPAN>{=0A=
    <SPAN class=3D"hljs-keyword">int</SPAN> max_len =3D <SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
    <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; dp(nums.size(), <SPAN =
class=3D"hljs-number">1</SPAN>);=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; nums.size(); ++i) {=0A=
        <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> j =3D <SPAN =
class=3D"hljs-number">0</SPAN>; j &lt; i; ++j) {=0A=
            <SPAN class=3D"hljs-keyword">if</SPAN>(nums[i] &gt; nums[j])=0A=
                dp[i] =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::max(dp[i], dp[j] + <SPAN =
class=3D"hljs-number">1</SPAN>);=0A=
        }=0A=
        max_len =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::max(max_len, dp[i]);=0A=
    }=0A=
    <SPAN class=3D"hljs-keyword">return</SPAN> max_len;=0A=
}=0A=
<SPAN class=3D"hljs-comment">/* O(nlgn) Patience Sort algorithm          =
 *=0A=
 * Only store the last element in each group.*/</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">PatienceSortBased_lengthOfLIS</SPAN><SPAN =
class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums)</SPAN> </SPAN>{=0A=
    <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; v;=0A=
    v.push_back(nums[<SPAN class=3D"hljs-number">0</SPAN>]);=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">1</SPAN>; i &lt; nums.size(); ++i) {=0A=
        <SPAN class=3D"hljs-keyword">if</SPAN>(nums[i] &lt; v[<SPAN =
class=3D"hljs-number">0</SPAN>]) v[<SPAN class=3D"hljs-number">0</SPAN>] =
=3D nums[i];=0A=
        <SPAN class=3D"hljs-keyword">else</SPAN> {=0A=
            <SPAN class=3D"hljs-keyword">auto</SPAN> it  =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::lower_bound(v.begin(), v.end(), =
nums[i]);=0A=
            <SPAN class=3D"hljs-keyword">if</SPAN>(it =3D=3D v.end()) =
v.push_back(nums[i]);=0A=
            <SPAN class=3D"hljs-keyword">else</SPAN>              *it =
=3D nums[i];=0A=
        }=0A=
    }=0A=
    <SPAN class=3D"hljs-keyword">return</SPAN> v.size();=0A=
}=0A=
</CODE></PRE></LI></UL></LI>
  <LI>Longest Common Substring and Longest Common Subsequence
  <UL>
    <LI>First is Longest Common Substring (simple 2 pointer =
manipulation):
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/dyn_prog/dyn=
_longest_common_subsequence.cc#L135&#10;std::string =
longestCommonSubstring(std::string &amp;amp;s1, std::string &amp;amp;s2) =
{&#10; int maxlen =3D 0, b =3D 0;&#10; int n =3D s1.size(), m =3D =
s2.size();&#10; for(int i =3D 0; i &amp;lt; n; ++i) {&#10;    for(int j =
=3D 0; j &amp;lt; m; ++j) {&#10;       int len =3D 0;&#10;       =
while((i + len &amp;lt; n) &amp;amp;&amp;amp; (j + len &amp;lt; m) =
&amp;amp;&amp;amp;&#10;             (s1[i+len] =3D=3D s2[j+len]))  =
len++;&#10;       if(len &amp;gt; maxlen) { b =3D i; maxlen =3D len; =
}&#10;    }&#10; }&#10; /* First longest substring in s1 that matches s2 =
         */&#10; return s1.substr(b, =
maxlen);&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/dyn=
_prog/dyn_longest_common_subsequence.cc#L135</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-function"><SPAN class=3D"hljs-built_in">string</SPAN> =
<SPAN class=3D"hljs-title">longestCommonSubstring</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> &amp;s1, <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> &amp;s2)</SPAN> </SPAN>{=0A=
 <SPAN class=3D"hljs-keyword">int</SPAN> maxlen =3D <SPAN =
class=3D"hljs-number">0</SPAN>, b =3D <SPAN =
class=3D"hljs-number">0</SPAN>;=0A=
 <SPAN class=3D"hljs-keyword">int</SPAN> n =3D s1.size(), m =3D =
s2.size();=0A=
 <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; n; ++i) {=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> j =3D <SPAN =
class=3D"hljs-number">0</SPAN>; j &lt; m; ++j) {=0A=
       <SPAN class=3D"hljs-keyword">int</SPAN> len =3D <SPAN =
class=3D"hljs-number">0</SPAN>;=0A=
       <SPAN class=3D"hljs-keyword">while</SPAN>((i + len &lt; n) =
&amp;&amp; (j + len &lt; m) &amp;&amp;=0A=
             (s1[i+len] =3D=3D s2[j+len]))  len++;=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(len &gt; maxlen) { b =3D =
i; maxlen =3D len; }=0A=
    }=0A=
 }=0A=
 <SPAN class=3D"hljs-comment">/* First longest substring in s1 that =
matches s2          */</SPAN>=0A=
 <SPAN class=3D"hljs-keyword">return</SPAN> s1.substr(b, maxlen);=0A=
}=0A=
</CODE></PRE></LI>
    <LI>Second is Subsequence (simple 2 pointer manipulation):
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">// =
https://github.com/prashrock/CPP/blob/master/leetcode/ds_string_is_subseq=
uence.cc#L35&#10;/*  Time Complexity =3D O(t)       Space Complexity =3D =
O(1)     */&#10;bool isSubsequence(string s, string t) {&#10;   =
if(t.size() &amp;lt; s.size()) return false;&#10;   int si =3D 0;&#10;   =
for(int ti =3D 0; si &amp;lt; (int)s.size() &amp;amp;&amp;amp; ti =
&amp;lt; (int)t.size(); ++ti)&#10;      if(s[si] =3D=3D t[ti]) =
si++;&#10;   return (si =3D=3D =
(int)s.size());&#10;}&#10;</code></pre>'><SPAN class=3D"hljs-comment">// =
https://github.com/prashrock/CPP/blob/master/leetcode/ds_string_is_subseq=
uence.cc#L35</SPAN>=0A=
<SPAN class=3D"hljs-comment">/*  Time Complexity =3D O(t)       Space =
Complexity =3D O(1)     */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">isSubsequence</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">string</SPAN> s, =
<SPAN class=3D"hljs-built_in">string</SPAN> t)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(t.size() &lt; s.size()) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">false</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> si =3D <SPAN =
class=3D"hljs-number">0</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> ti =3D <SPAN =
class=3D"hljs-number">0</SPAN>; si &lt; (<SPAN =
class=3D"hljs-keyword">int</SPAN>)s.size() &amp;&amp; ti &lt; (<SPAN =
class=3D"hljs-keyword">int</SPAN>)t.size(); ++ti)=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(s[si] =3D=3D t[ti]) si++;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> (si =3D=3D (<SPAN =
class=3D"hljs-keyword">int</SPAN>)s.size());=0A=
}=0A=
</CODE></PRE></LI>
    <LI>Third, longest common subsequence (DP):
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/dyn_prog/dyn=
_longest_common_subsequence.cc#L29&#10;int lcs_dp(const T s1[], size_t =
m, const T s2[], size_t n)&#10;{&#10;  =
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(m+1, =
vector&amp;lt;int&amp;gt;(n+1, 0));&#10;  for(size_t i =3D 1; i =
&amp;lt;=3D m; ++i) {&#10;     for(size_t j =3D 1; j &amp;lt;=3D n; ++j) =
{&#10;         /* a) If elements are equal, we have a match        =
*/&#10;         if(s1[i-1] =3D=3D s2[j-1]) dp[i][j] =3D dp[i-1][j-1] + =
1;&#10;         /* Else, use max of either previous row or column   =
*/&#10;         else    dp[i][j] =3D std::max(dp[i][j-1], =
dp[i-1][j]);&#10;     }&#10;  }&#10;  return =
dp[m][n];&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/dyn=
_prog/dyn_longest_common_subsequence.cc#L29</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">lcs_dp</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-keyword">const</SPAN> T s1[], =
size_t m, <SPAN class=3D"hljs-keyword">const</SPAN> T s2[], size_t =
n)</SPAN>=0A=
</SPAN>{=0A=
  <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt; dp(m+<SPAN =
class=3D"hljs-number">1</SPAN>, <SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;(n+<SPAN =
class=3D"hljs-number">1</SPAN>, <SPAN class=3D"hljs-number">0</SPAN>));=0A=
  <SPAN class=3D"hljs-keyword">for</SPAN>(size_t i =3D <SPAN =
class=3D"hljs-number">1</SPAN>; i &lt;=3D m; ++i) {=0A=
     <SPAN class=3D"hljs-keyword">for</SPAN>(size_t j =3D <SPAN =
class=3D"hljs-number">1</SPAN>; j &lt;=3D n; ++j) {=0A=
         <SPAN class=3D"hljs-comment">/* a) If elements are equal, we =
have a match        */</SPAN>=0A=
         <SPAN class=3D"hljs-keyword">if</SPAN>(s1[i-<SPAN =
class=3D"hljs-number">1</SPAN>] =3D=3D s2[j-<SPAN =
class=3D"hljs-number">1</SPAN>]) dp[i][j] =3D dp[i-<SPAN =
class=3D"hljs-number">1</SPAN>][j-<SPAN class=3D"hljs-number">1</SPAN>] =
+ <SPAN class=3D"hljs-number">1</SPAN>;=0A=
         <SPAN class=3D"hljs-comment">/* Else, use max of either =
previous row or column   */</SPAN>=0A=
         <SPAN class=3D"hljs-keyword">else</SPAN>    dp[i][j] =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::max(dp[i][j-<SPAN =
class=3D"hljs-number">1</SPAN>], dp[i-<SPAN =
class=3D"hljs-number">1</SPAN>][j]);=0A=
     }=0A=
  }=0A=
  <SPAN class=3D"hljs-keyword">return</SPAN> dp[m][n];=0A=
}=0A=
</CODE></PRE></LI></UL></LI></UL>
<H3 id=3D"backtrack"><A name=3D"backtrack" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#backtrack"></A>Backtrack</H3>
<UL>
  <LI>Visit all the neighbors from a given cell in a matrix
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D"<pre><code =
class=3D&quot;CPP&quot;>//https://github.com/prashrock/CPP/blob/master/le=
etcode/algo_backtrack_2D_number_of_islands.cc#L36&#10;static =
vector&amp;lt;int&amp;gt; directions4 =3D {0, -1, 0, 1, 0};&#10;static =
vector&amp;lt;int&amp;gt; directions8=3D {-1, 0, -1, -1, 1, 0, 1, 1, =
-1};&#10;for(int k =3D 0; k &amp;lt; (int)directions4.size() - 1; k++) =
{&#10;   int new_i =3D i + directions4[k], new_j =3D j + =
directions4[k+1];&#10;   /* Make sure if valid direction before using =
DFS       */&#10;   if((new_i &amp;lt; 0 || new_i =3D=3D m) || (new_j =
&amp;lt; 0 || new_j =3D=3D n) ||&#10;       (grid[new_i][new_j] =3D=3D =
'0'))&#10;       continue;&#10;   else VisitGridDFS(grid, m, n, new_i, =
new_j);&#10;}&#10;</code></pre>"><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/algo_backtrack_2D_number_of_islands.cc#L36</SPAN>=0A=
<SPAN class=3D"hljs-keyword">static</SPAN> <SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; directions4 =3D {<SPAN =
class=3D"hljs-number">0</SPAN>, -<SPAN class=3D"hljs-number">1</SPAN>, =
<SPAN class=3D"hljs-number">0</SPAN>, <SPAN =
class=3D"hljs-number">1</SPAN>, <SPAN class=3D"hljs-number">0</SPAN>};=0A=
<SPAN class=3D"hljs-keyword">static</SPAN> <SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; directions8=3D {-<SPAN =
class=3D"hljs-number">1</SPAN>, <SPAN class=3D"hljs-number">0</SPAN>, =
-<SPAN class=3D"hljs-number">1</SPAN>, -<SPAN =
class=3D"hljs-number">1</SPAN>, <SPAN class=3D"hljs-number">1</SPAN>, =
<SPAN class=3D"hljs-number">0</SPAN>, <SPAN =
class=3D"hljs-number">1</SPAN>, <SPAN class=3D"hljs-number">1</SPAN>, =
-<SPAN class=3D"hljs-number">1</SPAN>};=0A=
<SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> k =3D <SPAN =
class=3D"hljs-number">0</SPAN>; k &lt; (<SPAN =
class=3D"hljs-keyword">int</SPAN>)directions4.size() - <SPAN =
class=3D"hljs-number">1</SPAN>; k++) {=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> new_i =3D i + directions4[k], =
new_j =3D j + directions4[k+<SPAN class=3D"hljs-number">1</SPAN>];=0A=
   <SPAN class=3D"hljs-comment">/* Make sure if valid direction before =
using DFS       */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>((new_i &lt; <SPAN =
class=3D"hljs-number">0</SPAN> || new_i =3D=3D m) || (new_j &lt; <SPAN =
class=3D"hljs-number">0</SPAN> || new_j =3D=3D n) ||=0A=
       (grid[new_i][new_j] =3D=3D <SPAN =
class=3D"hljs-string">'0'</SPAN>))=0A=
       <SPAN class=3D"hljs-keyword">continue</SPAN>;=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">VisitGridDFS</SPAN><SPAN =
class=3D"hljs-params">(grid, m, n, new_i, new_j)</SPAN></SPAN>;=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"bitops"><A name=3D"bitops" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#bitops"></A>BitOps</H3>
<UL>
  <LI>LSB/MSB ?</LI></UL>
<HR class=3D"section">

<H2 id=3D"data-structures"><A name=3D"data-structures" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#data-structures"></A>Data=20
Structures</H2>
<H3 id=3D"list"><A name=3D"list" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#list"></A>List</H3>
<UL>
  <LI>Given a sorted integer array, duplicates are allowed atmost twice, =
remove=20
  all additional duplicates:
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
list_remove_duplicates_sorted_i_ii.cc#L75&#10;static const int MAX_DUP =
=3D 1;&#10;/* Allow upto MAX_DUP duplicates and remove all other dups   =
*/&#10;int removeDuplicates2(vector&amp;lt;int&amp;gt;&amp;amp; nums) =
{&#10;   if(nums.size() &amp;lt; 2) return nums.size();&#10;   int old =
=3D 1, dup_cnt =3D MAX_DUP;&#10;   for(int i =3D old; i &amp;lt; =
(int)nums.size(); ++i) {&#10;      if(nums[i] !=3D nums[i-1]) { =
nums[old++] =3D nums[i]; dup_cnt =3D MAX_DUP; }&#10;      else =
if(dup_cnt !=3D 0)    { nums[old++] =3D nums[i]; dup_cnt--;         =
}&#10;   }&#10;   nums.resize(old);&#10;   return =
nums.size();&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_list_remove_duplicates_sorted_i_ii.cc#L75</SPAN>=0A=
<SPAN class=3D"hljs-keyword">static</SPAN> <SPAN =
class=3D"hljs-keyword">const</SPAN> <SPAN =
class=3D"hljs-keyword">int</SPAN> MAX_DUP =3D <SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
<SPAN class=3D"hljs-comment">/* Allow upto MAX_DUP duplicates and remove =
all other dups   */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">removeDuplicates2</SPAN><SPAN =
class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(nums.size() &lt; <SPAN =
class=3D"hljs-number">2</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> nums.size();=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> old =3D <SPAN =
class=3D"hljs-number">1</SPAN>, dup_cnt =3D MAX_DUP;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D old; i &lt; (<SPAN =
class=3D"hljs-keyword">int</SPAN>)nums.size(); ++i) {=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(nums[i] !=3D nums[i-<SPAN =
class=3D"hljs-number">1</SPAN>]) { nums[old++] =3D nums[i]; dup_cnt =3D =
MAX_DUP; }=0A=
      <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(dup_cnt !=3D =
0)</SPAN>    </SPAN>{ nums[old++] =3D nums[i]; dup_cnt--;         }=0A=
   }=0A=
   nums.resize(old);=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> nums.size();=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Given a unsorted integer array and a val, remove all occurences of =
val=20
  from list. What if occurences are rare ?
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
list_remove_element.cc&#10;/* Optimization over the two pointer =
approach. If elements   *&#10; * to remove are rare, then move duplicate =
elements to end   */&#10;int =
removeElementII(vector&amp;lt;int&amp;gt;&amp;amp; nums, int val) {&#10; =
  int n =3D nums.size();&#10;   /* Increase i manually. What if last =
element is also val  */&#10;   for(int i =3D 0; i &amp;lt; n;) {&#10;    =
  if(nums[i] =3D=3D val) nums[i] =3D nums[--n];&#10;      else           =
    i++;&#10;   }&#10;   nums.resize(n);&#10;   return =
n;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_list_remove_element.cc</SPAN>=0A=
<SPAN class=3D"hljs-comment">/* Optimization over the two pointer =
approach. If elements   *=0A=
 * to remove are rare, then move duplicate elements to end   */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">removeElementII</SPAN><SPAN =
class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums, <SPAN =
class=3D"hljs-keyword">int</SPAN> val)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> n =3D nums.size();=0A=
   <SPAN class=3D"hljs-comment">/* Increase i manually. What if last =
element is also val  */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; n;) {=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(nums[i] =3D=3D val) nums[i] =
=3D nums[--n];=0A=
      <SPAN class=3D"hljs-keyword">else</SPAN>               i++;=0A=
   }=0A=
   nums.resize(n);=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> n;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Given a unsorted integer array containing only 3 possible =
elements, Sort=20
  the array ?
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
list_sort_colors.cc#L37&#10;/* Simple two-pointer approach to sort list =
into 3 buckets   *&#10; * Treat p0 and p2 as mere container end-points. =
Iterate with*&#10; * i and whenever there is a match, push to container  =
      *&#10; * Note: very similar to ds_list_remove_element.cc           =
*&#10; * Time complexity =3D O(n)     Space complexity =3D O(1)        =
*/&#10;void sortColorsI(vector&amp;lt;int&amp;gt;&amp;amp; nums) {&#10;  =
 int p0 =3D 0, p2 =3D nums.size() - 1;&#10;   for(int i =3D p0; i =
&amp;lt;=3D p2;) {&#10;      if     (i &amp;gt; p0 &amp;amp;&amp;amp; =
nums[i] =3D=3D 0) std::swap(nums[p0++], nums[i]);&#10;      else if(i =
&amp;lt; p2 &amp;amp;&amp;amp; nums[i] =3D=3D 2) std::swap(nums[p2--], =
nums[i]);&#10;      else ++i;&#10;   }&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_list_sort_colors.cc#L37</SPAN>=0A=
<SPAN class=3D"hljs-comment">/* Simple two-pointer approach to sort list =
into 3 buckets   *=0A=
 * Treat p0 and p2 as mere container end-points. Iterate with*=0A=
 * i and whenever there is a match, push to container        *=0A=
 * Note: very similar to ds_list_remove_element.cc           *=0A=
 * Time complexity =3D O(n)     Space complexity =3D O(1)        =
*/</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">void</SPAN> =
<SPAN class=3D"hljs-title">sortColorsI</SPAN><SPAN =
class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> p0 =3D <SPAN =
class=3D"hljs-number">0</SPAN>, p2 =3D nums.size() - <SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D p0; i &lt;=3D p2;) {=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>     (i &gt; p0 &amp;&amp; =
nums[i] =3D=3D <SPAN class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-built_in">std</SPAN>::swap(nums[p0++], nums[i]);=0A=
      <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(i &lt; p2 =
&amp;&amp; nums[i] =3D=3D 2)</SPAN> <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-title">swap</SPAN><SPAN class=3D"hljs-params">(nums[p2--], =
nums[i])</SPAN></SPAN>;=0A=
      <SPAN class=3D"hljs-keyword">else</SPAN> ++i;=0A=
   }=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"circular-queue"><A name=3D"circular-queue" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#circular-queue"></A>Circular=20
Queue</H3>
<UL>
  <LI>Numbers
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">num_free =3D mask + cons_tail - prod_head&#10;num_used =3D =
prod_tail - cons_head;&#10;/* note head is forward, tail is backward =
*/&#10;mp_enq(rte_ring *r, void *obj, int n) {&#10;   uint32_t mask =3D =
r-&amp;gt;prod.mask;&#10;   if(n =3D=3D 0) return; /* cmpset cannot =
handle n =3D=3D 0 */&#10;   /* Move prod.head automically first */&#10;  =
 do {&#10;      uint32_t free_entries =3D mask + cons_tail - =
prod_head;&#10;      if(n &amp;gt; free_entries) return; /* Not enough =
space */&#10;      uint32_t prod_next =3D prod_head + n;&#10;      int =
success =3D cmpset(&amp;amp;r-&amp;gt;prod.head, prod_head, prod_next); =
&#10;   } while( success =3D=3D 0); /* Repeat do-while till =
r-&amp;gt;prod.head can be changed */&#10;   //Write elements&#10;   =
wmb();&#10;   /* Move prod.tail. Note: if other enqueues in progress =
that *&#10;    * precede us, wait for them to complete                   =
 */&#10;   while(r-&amp;gt;prod.tail !=3D prod_head) {&#10;      //yield =
or pause&#10;   }&#10;   r-&amp;gt;prod.tail =3D prod_next;&#10;   =
return;&#10;}&#10;mc_deq(rte_ring *r, void *obj, int n) {&#10;   =
uint32_t mask =3D r-&amp;gt;prod.mask;&#10;   if(n =3D=3D 0) return; /* =
cmpset cannot handle n =3D=3D 0 */&#10;   /* Move cons.head automically =
first */&#10;   do {&#10;      uint32_t entries =3D prod_tail - =
cons_head;&#10;      if(n &amp;gt; entries) return; /* Not enough =
elements */&#10;      uint32_t cons_next =3D cons_head + n;&#10;      =
int success =3D cmpset(&amp;amp;r-&amp;gt;cons.head, cons_head, =
cons_next); &#10;   } while( success =3D=3D 0); /* Repeat do-while till =
r-&amp;gt;cons.head can be changed */&#10;   //Read elements&#10;   =
rmb();&#10;   /* Move cons.tail. Note: if other dequeues in progress =
that *&#10;    * precede us, wait for them to complete                   =
 */&#10;   while(r-&amp;gt;cons.tail !=3D cons_head) {&#10;      //yield =
or pause&#10;   }&#10;   r-&amp;gt;cons.tail =3D cons_next;&#10;   =
return;&#10;}&#10;</code></pre>'>num_free =3D mask + cons_tail - =
prod_head=0A=
num_used =3D prod_tail - cons_head;=0A=
<SPAN class=3D"hljs-comment">/* note head is forward, tail is backward =
*/</SPAN>=0A=
mp_enq(rte_ring *r, <SPAN class=3D"hljs-keyword">void</SPAN> *obj, <SPAN =
class=3D"hljs-keyword">int</SPAN> n) {=0A=
   <SPAN class=3D"hljs-keyword">uint32_t</SPAN> mask =3D r-&gt;prod.mask;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(n =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN>; <SPAN class=3D"hljs-comment">/* =
cmpset cannot handle n =3D=3D 0 */</SPAN>=0A=
   <SPAN class=3D"hljs-comment">/* Move prod.head automically first =
*/</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">do</SPAN> {=0A=
      <SPAN class=3D"hljs-keyword">uint32_t</SPAN> free_entries =3D mask =
+ cons_tail - prod_head;=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(n &gt; free_entries) <SPAN =
class=3D"hljs-keyword">return</SPAN>; <SPAN class=3D"hljs-comment">/* =
Not enough space */</SPAN>=0A=
      <SPAN class=3D"hljs-keyword">uint32_t</SPAN> prod_next =3D =
prod_head + n;=0A=
      <SPAN class=3D"hljs-keyword">int</SPAN> success =3D =
cmpset(&amp;r-&gt;prod.head, prod_head, prod_next); =0A=
   } <SPAN class=3D"hljs-keyword">while</SPAN>( success =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>); <SPAN class=3D"hljs-comment">/* Repeat =
do-while till r-&gt;prod.head can be changed */</SPAN>=0A=
   <SPAN class=3D"hljs-comment">//Write elements</SPAN>=0A=
   wmb();=0A=
   <SPAN class=3D"hljs-comment">/* Move prod.tail. Note: if other =
enqueues in progress that *=0A=
    * precede us, wait for them to complete                    */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">while</SPAN>(r-&gt;prod.tail !=3D =
prod_head) {=0A=
      <SPAN class=3D"hljs-comment">//yield or pause</SPAN>=0A=
   }=0A=
   r-&gt;prod.tail =3D prod_next;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN>;=0A=
}=0A=
mc_deq(rte_ring *r, <SPAN class=3D"hljs-keyword">void</SPAN> *obj, <SPAN =
class=3D"hljs-keyword">int</SPAN> n) {=0A=
   <SPAN class=3D"hljs-keyword">uint32_t</SPAN> mask =3D r-&gt;prod.mask;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(n =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN>; <SPAN class=3D"hljs-comment">/* =
cmpset cannot handle n =3D=3D 0 */</SPAN>=0A=
   <SPAN class=3D"hljs-comment">/* Move cons.head automically first =
*/</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">do</SPAN> {=0A=
      <SPAN class=3D"hljs-keyword">uint32_t</SPAN> entries =3D prod_tail =
- cons_head;=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(n &gt; entries) <SPAN =
class=3D"hljs-keyword">return</SPAN>; <SPAN class=3D"hljs-comment">/* =
Not enough elements */</SPAN>=0A=
      <SPAN class=3D"hljs-keyword">uint32_t</SPAN> cons_next =3D =
cons_head + n;=0A=
      <SPAN class=3D"hljs-keyword">int</SPAN> success =3D =
cmpset(&amp;r-&gt;cons.head, cons_head, cons_next); =0A=
   } <SPAN class=3D"hljs-keyword">while</SPAN>( success =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>); <SPAN class=3D"hljs-comment">/* Repeat =
do-while till r-&gt;cons.head can be changed */</SPAN>=0A=
   <SPAN class=3D"hljs-comment">//Read elements</SPAN>=0A=
   rmb();=0A=
   <SPAN class=3D"hljs-comment">/* Move cons.tail. Note: if other =
dequeues in progress that *=0A=
    * precede us, wait for them to complete                    */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">while</SPAN>(r-&gt;cons.tail !=3D =
cons_head) {=0A=
      <SPAN class=3D"hljs-comment">//yield or pause</SPAN>=0A=
   }=0A=
   r-&gt;cons.tail =3D cons_next;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN>;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Implement a queue using stack and stack using queue.</LI></UL>
<H3 id=3D"linked-list"><A name=3D"linked-list" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#linked-list"></A>Linked=20
List</H3>
<UL>
  <LI>Detect <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/DS/CS_=
DS_array_linkedlist_questions.html#how-to-find-if-linked-list-has-loop-?"=
>cycle=20
  in a linked-list</A>
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D"<pre><code =
class=3D&quot;CPP&quot;>//https://github.com/prashrock/CPP/blob/master/le=
etcode/ds_linkedlist_cycle.cc#L71&#10;/* Detect loop with =
Floyd=E2=80=99s cycle-finding algorithm.     *&#10; * Once a loop is =
detected, start slow from the beginning and update both slow, &#10; * =
fast till they meet again. Math below:                *&#10; *  Assume: =
Length of loop       C =3D y + z               *&#10; *  Assume: =
Distance before loop   =3D x                   *&#10; * When slow meets =
fast (remember, fast is twice as fast as slow): *&#10; * Slow's total =
distance,        d =3D x + y          //1  *&#10; * Fast's total =
distance,    2 * d =3D x + y + z + y  //2  *&#10; * Substitute (d) from =
(1) into (2), we get the below:   *&#10; *    2 * d =3D x + y + z + y =
=3D x + 2y + z //sub (1) in (2)*&#10; * 2(x + y) =3D x + 2y + z          =
                       *&#10; *  2x + 2y =3D x + 2y + z                  =
               *&#10; *       x  =3D  z                                  =
  //3  */&#10;ListNode *detectCycle(ListNode *head) {&#10;   /* =
base-case: 0 elements */&#10;   if(head =3D=3D nullptr) return =
nullptr;&#10;   /* Use same logic as before to detect loop */&#10;   =
auto slow(head), fast(head);&#10;   for(;fast !=3D nullptr =
&amp;amp;&amp;amp; fast-&amp;gt;next !=3D nullptr;) {&#10;      slow =3D =
slow-&amp;gt;next;&#10;      fast =3D =
fast-&amp;gt;next-&amp;gt;next;&#10;      if(slow =3D=3D fast) =
break;&#10;   }&#10;   /* If there is no loop, return nullptr     =
*/&#10;   if(fast =3D=3D nullptr || fast-&amp;gt;next =3D=3D nullptr) =
return nullptr;&#10;   /* Slow from begin, fast from cur, wait till they =
meet */&#10;   for(slow =3D head; slow !=3D fast; =
slow=3Dslow-&amp;gt;next, fast=3Dfast-&amp;gt;next);&#10;   return =
slow;&#10;}&#10;</code></pre>"><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_linkedlist_cycle.cc#L71</SPAN>=0A=
<SPAN class=3D"hljs-comment">/* Detect loop with Floyd=E2=80=99s =
cycle-finding algorithm.     *=0A=
 * Once a loop is detected, start slow from the beginning and update =
both slow, =0A=
 * fast till they meet again. Math below:                *=0A=
 *  Assume: Length of loop       C =3D y + z               *=0A=
 *  Assume: Distance before loop   =3D x                   *=0A=
 * When slow meets fast (remember, fast is twice as fast as slow): *=0A=
 * Slow's total distance,        d =3D x + y          //1  *=0A=
 * Fast's total distance,    2 * d =3D x + y + z + y  //2  *=0A=
 * Substitute (d) from (1) into (2), we get the below:   *=0A=
 *    2 * d =3D x + y + z + y =3D x + 2y + z //sub (1) in (2)*=0A=
 * 2(x + y) =3D x + 2y + z                                 *=0A=
 *  2x + 2y =3D x + 2y + z                                 *=0A=
 *       x  =3D  z                                    //3  */</SPAN>=0A=
ListNode *detectCycle(ListNode *head) {=0A=
   <SPAN class=3D"hljs-comment">/* base-case: 0 elements */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(head =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>;=0A=
   <SPAN class=3D"hljs-comment">/* Use same logic as before to detect =
loop */</SPAN>=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">auto</SPAN> <SPAN =
class=3D"hljs-title">slow</SPAN><SPAN =
class=3D"hljs-params">(head)</SPAN>, <SPAN =
class=3D"hljs-title">fast</SPAN><SPAN =
class=3D"hljs-params">(head)</SPAN></SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(;fast !=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN> &amp;&amp; fast-&gt;next !=3D =
<SPAN class=3D"hljs-keyword">nullptr</SPAN>;) {=0A=
      slow =3D slow-&gt;next;=0A=
      fast =3D fast-&gt;next-&gt;next;=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(slow =3D=3D fast) <SPAN =
class=3D"hljs-keyword">break</SPAN>;=0A=
   }=0A=
   <SPAN class=3D"hljs-comment">/* If there is no loop, return nullptr   =
  */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(fast =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN> || fast-&gt;next =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>;=0A=
   <SPAN class=3D"hljs-comment">/* Slow from begin, fast from cur, wait =
till they meet */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(slow =3D head; slow !=3D =
fast; slow=3Dslow-&gt;next, fast=3Dfast-&gt;next);=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> slow;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Remove all elements from a linked list of integers that have a =
specific=20
  value.
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D"<pre><code =
class=3D&quot;CPP&quot;>//https://github.com/prashrock/CPP/blob/master/le=
etcode/ds_linkedlist_delete_val.cc#L56&#10;/**  @brief  - Approach 2     =
                               *&#10; * Handle head removal first. Next, =
handle inbetween nodes   */&#10; ListNode* removeElements2(ListNode* =
head, int val) {&#10;    /* Remove all the head pointers which have val  =
          */&#10;    while(head &amp;amp;&amp;amp; head-&amp;gt;val =
=3D=3D val) head =3D head-&amp;gt;next;&#10;    if(head =3D=3D nullptr)  =
           return head;&#10;    /* Handle inbetween nodes. Note: be =
careful about when to *&#10;     * move cur and when to move cur's next =
pointer           */&#10;    for(auto cur =3D head; cur =
&amp;amp;&amp;amp; cur-&amp;gt;next; ) {&#10;       =
if(cur-&amp;gt;next-&amp;gt;val =3D=3D val) cur-&amp;gt;next =3D =
cur-&amp;gt;next-&amp;gt;next;&#10;       else                      cur  =
     =3D cur-&amp;gt;next;&#10;    }&#10;    return =
head;&#10;}&#10;</code></pre>"><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_linkedlist_delete_val.cc#L56</SPAN>=0A=
<SPAN class=3D"hljs-comment">/**  @brief  - Approach 2                   =
                 *=0A=
 * Handle head removal first. Next, handle inbetween nodes   */</SPAN>=0A=
 ListNode* removeElements2(ListNode* head, <SPAN =
class=3D"hljs-keyword">int</SPAN> val) {=0A=
    <SPAN class=3D"hljs-comment">/* Remove all the head pointers which =
have val            */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">while</SPAN>(head &amp;&amp; =
head-&gt;val =3D=3D val) head =3D head-&gt;next;=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(head =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>)             <SPAN =
class=3D"hljs-keyword">return</SPAN> head;=0A=
    <SPAN class=3D"hljs-comment">/* Handle inbetween nodes. Note: be =
careful about when to *=0A=
     * move cur and when to move cur's next pointer           */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">auto</SPAN> cur =3D head; cur &amp;&amp; =
cur-&gt;next; ) {=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(cur-&gt;next-&gt;val =
=3D=3D val) cur-&gt;next =3D cur-&gt;next-&gt;next;=0A=
       <SPAN class=3D"hljs-keyword">else</SPAN>                      cur =
      =3D cur-&gt;next;=0A=
    }=0A=
    <SPAN class=3D"hljs-keyword">return</SPAN> head;=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"tree"><A name=3D"tree" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#tree"></A>Tree</H3>
<UL>
  <LI>Validate BST
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">/* Do In-order traversal and validate recursively =
*/&#10;bool isValidBST(TreeNode* root) {&#10;   TreeNode* prev =3D =
NULL;&#10;   return isValidBST(root, prev);&#10;}&#10;bool =
isValidBST(TreeNode* root, TreeNode* &amp;amp;prev) {&#10;   if(root =
=3D=3D nullptr)                        return true;&#10;   =
if(isValidBST(root-&amp;gt;left, prev) =3D=3D false)  return false;  =
//Left&#10;   if(prev &amp;amp;&amp;amp; prev-&amp;gt;val &amp;gt;=3D =
root-&amp;gt;val)         return false;  //Root&#10;   prev =3D =
root;&#10;   return isValidBST(root-&amp;gt;right, prev);                =
     //Right&#10;}&#10;/* Use known min-max values to validate =
*/&#10;bool isValidBST(TreeNode* root) {&#10;   return isValidBST(root, =
LONG_MIN, LONG_MAX);&#10;}&#10;bool isValidBST(TreeNode* root, long min, =
long max) {&#10;   if(root =3D=3D nullptr)                               =
  return true;&#10;   if((root-&amp;gt;val &amp;lt;=3D min) || =
(root-&amp;gt;val &amp;gt;=3D max))        return false;&#10;   =
if(isValidBST(root-&amp;gt;left, min, root-&amp;gt;val) =3D=3D false) =
return false;&#10;   if(isValidBST(root-&amp;gt;right,root-&amp;gt;val, =
max) =3D=3D false) return false;&#10;   return =
true;&#10;}&#10;</code></pre>'><SPAN class=3D"hljs-comment">/* Do =
In-order traversal and validate recursively */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">isValidBST</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* root)</SPAN> </SPAN>{=0A=
   TreeNode* prev =3D NULL;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> isValidBST(root, prev);=0A=
}=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">isValidBST</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* root, TreeNode* &amp;prev)</SPAN> =
</SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(root =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>)                        <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">true</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(isValidBST(root-&gt;left, =
prev) =3D=3D <SPAN class=3D"hljs-keyword">false</SPAN>)  <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">false</SPAN>;  <SPAN =
class=3D"hljs-comment">//Left</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(prev &amp;&amp; prev-&gt;val =
&gt;=3D root-&gt;val)         <SPAN class=3D"hljs-keyword">return</SPAN> =
<SPAN class=3D"hljs-keyword">false</SPAN>;  <SPAN =
class=3D"hljs-comment">//Root</SPAN>=0A=
   prev =3D root;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> isValidBST(root-&gt;right, =
prev);                     <SPAN class=3D"hljs-comment">//Right</SPAN>=0A=
}=0A=
<SPAN class=3D"hljs-comment">/* Use known min-max values to validate =
*/</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">isValidBST</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* root)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> isValidBST(root, LONG_MIN, =
LONG_MAX);=0A=
}=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">isValidBST</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* root, <SPAN =
class=3D"hljs-keyword">long</SPAN> min, <SPAN =
class=3D"hljs-keyword">long</SPAN> max)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(root =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>)                                 =
<SPAN class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">true</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>((root-&gt;val &lt;=3D min) || =
(root-&gt;val &gt;=3D max))        <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">false</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(isValidBST(root-&gt;left, min, =
root-&gt;val) =3D=3D <SPAN class=3D"hljs-keyword">false</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">false</SPAN>;=0A=
   <SPAN =
class=3D"hljs-keyword">if</SPAN>(isValidBST(root-&gt;right,root-&gt;val, =
max) =3D=3D <SPAN class=3D"hljs-keyword">false</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">false</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">true</SPAN>;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Get immediate Floor and Ceiling node in BST given target value. =
Note,=20
  target value may not even be present (<A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/DS/CS_=
DS_tree_questions.html#bst---find-the-floor-and-ceil-nodes">impl</A>).
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">TreeNode* bst_get_floor_node(TreeNode* x, int t) {&#10;   =
if(x =3D=3D NULL)          return NULL;&#10;   else if(x-&amp;gt;val =
&amp;gt;=3D t) return bst_get_floor_node_impl(x-&amp;gt;left, t);&#10;   =
/* Two possibilities: * 1) Current node is the floor            *&#10;   =
 * 2) Floor resides on right-subtree. First scan right sub-tree */&#10;  =
 bst_node_t *t =3D bst_get_floor_node_impl(x-&amp;gt;right, t);&#10;   =
if(t)                  return t;&#10;   else                   return =
x;&#10;}&#10;// Note: Ceil implementation is the exact =
opposite&#10;</code></pre>'>TreeNode* bst_get_floor_node(TreeNode* x, =
<SPAN class=3D"hljs-keyword">int</SPAN> t) {=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(x =3D=3D NULL)          <SPAN =
class=3D"hljs-keyword">return</SPAN> NULL;=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(x-&gt;val =
&gt;=3D t)</SPAN> return <SPAN =
class=3D"hljs-title">bst_get_floor_node_impl</SPAN><SPAN =
class=3D"hljs-params">(x-&gt;left, t)</SPAN></SPAN>;=0A=
   <SPAN class=3D"hljs-comment">/* Two possibilities: * 1) Current node =
is the floor            *=0A=
    * 2) Floor resides on right-subtree. First scan right sub-tree =
*/</SPAN>=0A=
   bst_node_t *t =3D bst_get_floor_node_impl(x-&gt;right, t);=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(t)                  <SPAN =
class=3D"hljs-keyword">return</SPAN> t;=0A=
   <SPAN class=3D"hljs-keyword">else</SPAN>                   <SPAN =
class=3D"hljs-keyword">return</SPAN> x;=0A=
}=0A=
<SPAN class=3D"hljs-comment">// Note: Ceil implementation is the exact =
opposite</SPAN>=0A=
</CODE></PRE></LI>
  <LI>Pre-order and In-order traversal (without recursion)
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Pre-order traversal</TH>
      <TH style=3D"text-align: left;">In-order traversal</TH>
      <TH style=3D"text-align: left;">Post-order =
traversal</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;">Root</TD>
      <TD style=3D"text-align: left;">Left</TD>
      <TD style=3D"text-align: left;">Left</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">Left</TD>
      <TD style=3D"text-align: left;">Root</TD>
      <TD style=3D"text-align: left;">Right</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">Right</TD>
      <TD style=3D"text-align: left;">Right</TD>
      <TD style=3D"text-align: left;">Root</TD></TR></TBODY></TABLE>
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
tree_traversal_pre_in_order_iterative_bt.cc#L46&#10;std::vector&amp;lt;in=
t&amp;gt; preorderTraversal(TreeNode* root) {&#10;   =
stack&amp;lt;TreeNode*&amp;gt; st;&#10;   vector&amp;lt;int&amp;gt; =
ans;&#10;   if(root) st.push(root);&#10;   while(!st.empty()) {       /* =
Cover all nods in stack      */&#10;       auto x =3D st.top();&#10;     =
  st.pop();&#10;       ans.push_back(x-&amp;gt;val); /* Preorder =3D =
root,left,right   */&#10;       if(x-&amp;gt;right) =
st.push(x-&amp;gt;right);&#10;       if(x-&amp;gt;left)  =
st.push(x-&amp;gt;left);&#10;   }&#10;   return ans;&#10;}&#10;/* Push =
all left-leaning nodes to stack and maintain separate cur ptr =
*/&#10;vector&amp;lt;int&amp;gt; inorderTraversal(TreeNode* root) {&#10; =
  vector&amp;lt;int&amp;gt; ans;&#10;   stack&amp;lt;TreeNode *&amp;gt; =
st;&#10;   TreeNode *cur =3D root;&#10;   while(!st.empty() || cur) =
{&#10;       while(cur) {st.push(cur); cur =3D cur-&amp;gt;left;}&#10;   =
    cur =3D st.top(); st.pop();&#10;       =
ans.push_back(cur-&amp;gt;val);&#10;       cur =3D =
cur-&amp;gt;right;&#10;   }&#10;   return =
ans;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_tree_traversal_pre_in_order_iterative_bt.cc#L46</SPAN>=0A=
<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; preorderTraversal(TreeNode* root) {=0A=
   <SPAN class=3D"hljs-built_in">stack</SPAN>&lt;TreeNode*&gt; st;=0A=
   <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; ans;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(root) st.push(root);=0A=
   <SPAN class=3D"hljs-keyword">while</SPAN>(!st.empty()) {       <SPAN =
class=3D"hljs-comment">/* Cover all nods in stack      */</SPAN>=0A=
       <SPAN class=3D"hljs-keyword">auto</SPAN> x =3D st.top();=0A=
       st.pop();=0A=
       ans.push_back(x-&gt;val); <SPAN class=3D"hljs-comment">/* =
Preorder =3D root,left,right   */</SPAN>=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(x-&gt;right) =
st.push(x-&gt;right);=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(x-&gt;left)  =
st.push(x-&gt;left);=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> ans;=0A=
}=0A=
<SPAN class=3D"hljs-comment">/* Push all left-leaning nodes to stack and =
maintain separate cur ptr */</SPAN>=0A=
<SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; inorderTraversal(TreeNode* root) {=0A=
   <SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; ans;=0A=
   <SPAN class=3D"hljs-built_in">stack</SPAN>&lt;TreeNode *&gt; st;=0A=
   TreeNode *cur =3D root;=0A=
   <SPAN class=3D"hljs-keyword">while</SPAN>(!st.empty() || cur) {=0A=
       <SPAN class=3D"hljs-keyword">while</SPAN>(cur) {st.push(cur); cur =
=3D cur-&gt;left;}=0A=
       cur =3D st.top(); st.pop();=0A=
       ans.push_back(cur-&gt;val);=0A=
       cur =3D cur-&gt;right;=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> ans;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Level Order traversal without recursion
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//My leetcode posting @ =
https://leetcode.com/submissions/detail/74832135/&#10;vector&amp;lt;vecto=
r&amp;lt;int&amp;gt;&amp;gt; LevelOrderIterative(TreeNode* root) {&#10;  =
 std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; ans;&#10;   =
std::vector&amp;lt;TreeNode *&amp;gt; clevel;&#10;   if(root) =
clevel.push_back(root);&#10;   /* Loop once for each level  */&#10;   =
for(int depth =3D 0 ; clevel.size() !=3D 0; ++depth) {&#10;       =
if(ans.size() =3D=3D depth) =
ans.push_back(std::vector&amp;lt;int&amp;gt;());&#10;       int n =3D =
clevel.size();&#10;       for(int i =3D 0; i &amp;lt; n; ++i) {&#10;     =
      ans[depth].push_back(clevel[i]-&amp;gt;val);&#10;           =
if(clevel[i]-&amp;gt;left)  =
clevel.push_back(clevel[i]-&amp;gt;left);&#10;           =
if(clevel[i]-&amp;gt;right) =
clevel.push_back(clevel[i]-&amp;gt;right);&#10;       }&#10;       =
clevel.erase(clevel.begin(), clevel.begin() + n);&#10;   }&#10;   return =
ans;&#10;}&#10;</code></pre>'><SPAN class=3D"hljs-comment">//My leetcode =
posting @ https://leetcode.com/submissions/detail/74832135/</SPAN>=0A=
<SPAN class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt; LevelOrderIterative(TreeNode* =
root) {=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt; ans;=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;TreeNode *&gt; clevel;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(root) clevel.push_back(root);=0A=
   <SPAN class=3D"hljs-comment">/* Loop once for each level  */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> depth =3D <SPAN =
class=3D"hljs-number">0</SPAN> ; clevel.size() !=3D <SPAN =
class=3D"hljs-number">0</SPAN>; ++depth) {=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(ans.size() =3D=3D depth) =
ans.push_back(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;());=0A=
       <SPAN class=3D"hljs-keyword">int</SPAN> n =3D clevel.size();=0A=
       <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; n; ++i) {=0A=
           ans[depth].push_back(clevel[i]-&gt;val);=0A=
           <SPAN class=3D"hljs-keyword">if</SPAN>(clevel[i]-&gt;left)  =
clevel.push_back(clevel[i]-&gt;left);=0A=
           <SPAN class=3D"hljs-keyword">if</SPAN>(clevel[i]-&gt;right) =
clevel.push_back(clevel[i]-&gt;right);=0A=
       }=0A=
       clevel.erase(clevel.begin(), clevel.begin() + n);=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> ans;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Given a binary tree, determine if its height-balanced, i.e., max =
depth of=20
  left and right sub-tree do not differ by more than 1.
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
tree_min_max_depth_bt.cc#L49&#10;/*&#10; * @brief Top-Down approach. =
Time complexity is O(n^2) as    *&#10; * for each node there are two =
traversals.                   */&#10;bool isBalancedTopDown(TreeNode* =
root) {&#10;   if(root =3D=3D nullptr)   return true; /* basecase empty =
tree */&#10;   else if(std::abs(maxDepth(root-&amp;gt;left) - =
maxDepth(root-&amp;gt;right)) &amp;gt; 1) return false;&#10;   else =
return (isBalancedTopDown(root-&amp;gt;left) &amp;amp;&amp;amp; =
isBalancedTopDown(root-&amp;gt;right));&#10;}&#10;/*&#10; * @brief =
Bottom-Up DFS based approach to check if tree is   *&#10; * balanced. =
Time complexity =3D O(n) each node accessed once  */&#10;int =
BTBottomUpHeight(TreeNode* root) {&#10;   if(root =3D=3D nullptr) return =
0;&#10;   int lsub_ht =3D BTBottomUpHeight(root-&amp;gt;left);&#10;   =
if(lsub_ht =3D=3D -1) return -1;&#10;   int rsub_ht =3D =
BTBottomUpHeight(root-&amp;gt;right);&#10;   if(rsub_ht =3D=3D -1) =
return -1;&#10;   if(std::abs(lsub_ht - rsub_ht) &amp;gt; 1) return =
-1;&#10;   else                                return 1 + =
std::max(lsub_ht, rsub_ht);&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_tree_min_max_depth_bt.cc#L49</SPAN>=0A=
<SPAN class=3D"hljs-comment">/*=0A=
 * @brief Top-Down approach. Time complexity is O(n^2) as    *=0A=
 * for each node there are two traversals.                   */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">isBalancedTopDown</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* root)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(root =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>)   <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">true</SPAN>; <SPAN class=3D"hljs-comment">/* =
basecase empty tree */</SPAN>=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">abs</SPAN>(maxDepth(root-&gt;left)</SPAN> - =
<SPAN class=3D"hljs-title">maxDepth</SPAN><SPAN =
class=3D"hljs-params">(root-&gt;right)</SPAN>) &gt; 1) return <SPAN =
class=3D"hljs-keyword">false</SPAN></SPAN>;=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">return</SPAN> <SPAN =
class=3D"hljs-params">(isBalancedTopDown(root-&gt;left)</SPAN> =
&amp;&amp; <SPAN class=3D"hljs-title">isBalancedTopDown</SPAN><SPAN =
class=3D"hljs-params">(root-&gt;right)</SPAN>)</SPAN>;=0A=
}=0A=
<SPAN class=3D"hljs-comment">/*=0A=
 * @brief Bottom-Up DFS based approach to check if tree is   *=0A=
 * balanced. Time complexity =3D O(n) each node accessed once  */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">BTBottomUpHeight</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* root)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(root =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-number">0</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> lsub_ht =3D =
BTBottomUpHeight(root-&gt;left);=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(lsub_ht =3D=3D -<SPAN =
class=3D"hljs-number">1</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> rsub_ht =3D =
BTBottomUpHeight(root-&gt;right);=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(rsub_ht =3D=3D -<SPAN =
class=3D"hljs-number">1</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(<SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">abs</SPAN>(lsub_ht - rsub_ht) &gt; <SPAN =
class=3D"hljs-number">1</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">else</SPAN>                              =
  <SPAN class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-number">1</SPAN> + <SPAN =
class=3D"hljs-built_in">std</SPAN>::max(lsub_ht, rsub_ht);=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Find the lowest common ancestor of a binary tree and binary search =
tree.
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
tree_lca_bt_bst.cc#L28&#10;/** @brief Recursive approach to find LCP of =
BST             */&#10;TreeNode* bst_lca(TreeNode* root, TreeNode* p, =
TreeNode* q) {&#10;    if(root =3D=3D NULL || p =3D=3D NULL || q =3D=3D =
NULL)        return NULL;&#10;    else if(root-&amp;gt;val &amp;gt; =
p-&amp;gt;val &amp;amp;&amp;amp; root-&amp;gt;val &amp;gt; =
q-&amp;gt;val) return bst_lca(root-&amp;gt;left, p, q);&#10;    else =
if(root-&amp;gt;val &amp;lt; p-&amp;gt;val &amp;amp;&amp;amp; =
root-&amp;gt;val &amp;lt; q-&amp;gt;val) return =
bst_lca(root-&amp;gt;right, p, q);&#10;    else                          =
                    return root;&#10;}&#10;/** @brief Recursive approach =
to find LCP of BT              *&#10; * Assume p and q exist. If cannot =
assume, find p,q first    */&#10;TreeNode* bt_lca(TreeNode* root, =
TreeNode* p, TreeNode* q) {&#10;    TreeNode *lhs =3D NULL, *rhs =3D =
NULL;&#10;    if(root =3D=3D NULL || p =3D=3D NULL || q =3D=3D NULL)  =
return NULL;&#10;    else if(root =3D=3D p || root =3D=3D q)             =
return root;&#10;    if(root-&amp;gt;left)     lhs =3D =
bt_lca(root-&amp;gt;left, p, q);&#10;    if(root-&amp;gt;right)    rhs =
=3D bt_lca(root-&amp;gt;right, p, q);&#10;    if(lhs &amp;amp;&amp;amp; =
rhs)     return root;&#10;    else if(lhs)       return lhs;&#10;    =
else               return rhs;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_tree_lca_bt_bst.cc#L28</SPAN>=0A=
<SPAN class=3D"hljs-comment">/** @brief Recursive approach to find LCP =
of BST             */</SPAN>=0A=
TreeNode* bst_lca(TreeNode* root, TreeNode* p, TreeNode* q) {=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(root =3D=3D NULL || p =3D=3D =
NULL || q =3D=3D NULL)        <SPAN class=3D"hljs-keyword">return</SPAN> =
NULL;=0A=
    <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(root-&gt;val =
&gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val)</SPAN> return =
<SPAN class=3D"hljs-title">bst_lca</SPAN><SPAN =
class=3D"hljs-params">(root-&gt;left, p, q)</SPAN></SPAN>;=0A=
    <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(root-&gt;val =
&lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val)</SPAN> return =
<SPAN class=3D"hljs-title">bst_lca</SPAN><SPAN =
class=3D"hljs-params">(root-&gt;right, p, q)</SPAN></SPAN>;=0A=
    <SPAN class=3D"hljs-keyword">else</SPAN>                             =
                 <SPAN class=3D"hljs-keyword">return</SPAN> root;=0A=
}=0A=
<SPAN class=3D"hljs-comment">/** @brief Recursive approach to find LCP =
of BT              *=0A=
 * Assume p and q exist. If cannot assume, find p,q first    */</SPAN>=0A=
TreeNode* bt_lca(TreeNode* root, TreeNode* p, TreeNode* q) {=0A=
    TreeNode *lhs =3D NULL, *rhs =3D NULL;=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(root =3D=3D NULL || p =3D=3D =
NULL || q =3D=3D NULL)  <SPAN class=3D"hljs-keyword">return</SPAN> NULL;=0A=
    <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(root =3D=3D p =
|| root =3D=3D q)</SPAN>             return root</SPAN>;=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(root-&gt;left)     lhs =3D =
bt_lca(root-&gt;left, p, q);=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(root-&gt;right)    rhs =3D =
bt_lca(root-&gt;right, p, q);=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(lhs &amp;&amp; rhs)     <SPAN =
class=3D"hljs-keyword">return</SPAN> root;=0A=
    <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(lhs)</SPAN>   =
    return lhs</SPAN>;=0A=
    <SPAN class=3D"hljs-keyword">else</SPAN>               <SPAN =
class=3D"hljs-keyword">return</SPAN> rhs;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Given a Binary Tree and a sum, return all the root-&gt;leaf paths =
which=20
  add upto given sum
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
tree_path_sum_i_ii.cc#L51&#10;/** @brief Recursive Pre-Order DFS =
approach to explore all *&#10; * root-&amp;gt;leaf paths and pass =
current traversal list along  *&#10; * @param r =3D current node of BT.  =
                        */&#10; void pathSumII(TreeNode* x, int sum, =
std::vector&amp;lt;int&amp;gt;&amp;amp; cur,&#10;                =
std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; ans) =
{&#10;     sum -=3D x-&amp;gt;val;&#10;     =
cur.push_back(x-&amp;gt;val);  /* add cur node to visit list */&#10;     =
if(x-&amp;gt;left =3D=3D nullptr &amp;amp;&amp;amp; x-&amp;gt;right =
=3D=3D nullptr) {&#10;         if(sum =3D=3D 0) ans.push_back(cur);&#10; =
    }&#10;     else {&#10;         if(x-&amp;gt;left)  =
pathSumII(x-&amp;gt;left,  sum, cur, ans);&#10;         =
if(x-&amp;gt;right) pathSumII(x-&amp;gt;right, sum, cur, ans);&#10;     =
}&#10;     /* Remove cur node from the visit list                */&#10; =
    cur.erase(cur.begin() + cur.size() - =
1);&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_tree_path_sum_i_ii.cc#L51</SPAN>=0A=
<SPAN class=3D"hljs-comment">/** @brief Recursive Pre-Order DFS approach =
to explore all *=0A=
 * root-&gt;leaf paths and pass current traversal list along  *=0A=
 * @param r =3D current node of BT.                          */</SPAN>=0A=
 <SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">void</SPAN> =
<SPAN class=3D"hljs-title">pathSumII</SPAN><SPAN =
class=3D"hljs-params">(TreeNode* x, <SPAN =
class=3D"hljs-keyword">int</SPAN> sum, <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; cur,=0A=
                <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt;&amp; ans)</SPAN> </SPAN>{=0A=
     sum -=3D x-&gt;val;=0A=
     cur.push_back(x-&gt;val);  <SPAN class=3D"hljs-comment">/* add cur =
node to visit list */</SPAN>=0A=
     <SPAN class=3D"hljs-keyword">if</SPAN>(x-&gt;left =3D=3D <SPAN =
class=3D"hljs-keyword">nullptr</SPAN> &amp;&amp; x-&gt;right =3D=3D =
<SPAN class=3D"hljs-keyword">nullptr</SPAN>) {=0A=
         <SPAN class=3D"hljs-keyword">if</SPAN>(sum =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) ans.push_back(cur);=0A=
     }=0A=
     <SPAN class=3D"hljs-keyword">else</SPAN> {=0A=
         <SPAN class=3D"hljs-keyword">if</SPAN>(x-&gt;left)  =
pathSumII(x-&gt;left,  sum, cur, ans);=0A=
         <SPAN class=3D"hljs-keyword">if</SPAN>(x-&gt;right) =
pathSumII(x-&gt;right, sum, cur, ans);=0A=
     }=0A=
     <SPAN class=3D"hljs-comment">/* Remove cur node from the visit list =
               */</SPAN>=0A=
     cur.erase(cur.begin() + cur.size() - <SPAN =
class=3D"hljs-number">1</SPAN>);=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Total number of BT/BST with n keys
  <UL>
    <LI>This can be solved <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/DS/CS_=
DS_tree_questions.html#total-number-of-bt-and-bst-with-n-keys">via=20
    recursion as shown here</A></LI>
    <LI>This also is the nth catalan number.</LI></UL></LI></UL>
<H3 id=3D"string"><A name=3D"string" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#string"></A>String</H3>
<UL>
  <LI><STRONG>Substring search</STRONG>
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">// =
https://github.com/prashrock/CPP/blob/master/string/substring.h#L52&#10;/=
* Brute-force optimized                                  *&#10; * Best =
for : Short text and pattern                      *&#10; * Worst Case =
Time Complexity =3D O(NM) (Typical =3D O(1.1N)) *&#10; * Space =
Complexity           =3D O(1)                      */&#10;int =
substring_opt(std::string text, std::string pat) {&#10;   if(text.size() =
=3D=3D 0 || pat.size() =3D=3D 0) return -1;&#10;   size_t i, j;&#10;   =
for(i =3D 0, j =3D 0; i &amp;lt; text.size() &amp;amp;&amp;amp; j =
&amp;lt; pat.size(); ++i) {&#10;       if(text[i] =3D=3D pat[j]) =
++j;&#10;       else {  /* Backtrack text by j and reset pat */&#10;     =
      i -=3D j;&#10;           j  =3D 0;&#10;       }&#10;   }&#10;   =
if(j =3D=3D pat.size())  return (i - pat.size());&#10;   else            =
     return -1;&#10;}&#10;/* Boyer Moore Substring search algorithm:     =
              *&#10; * Scan pattern chars from right to left. Skip as =
many as M  *&#10; * text chars when finding one char not in pattern.     =
     *&#10; * Best for :Long pattern resembling natural text            =
*&#10; * Worst Case Time Complexity =3D O(MN) (Typical =3D O(N/M))     =
*&#10; * Space Complexity           =3D O(R) where R =3D Radix         =
*&#10; * Note - Radix is 256 (to support Extended ASCII char seq). =
*&#10; * Note - GNU grep uses Boyer Moore with unrolled inner loop =
*/&#10;int substring_boyer_moore(std::string text, std::string pat) =
{&#10;   if(text.size() =3D=3D 0 || pat.size() =3D=3D 0) return -1;&#10; =
  std::vector&amp;lt;int&amp;gt; radix(256, -1);&#10;   int N =3D =
text.size(), M =3D pat.size(), skip =3D 0;&#10;   /*Only store last =
occur of each char in pattern */&#10;   for(int j =3D 0; j &amp;lt; M; =
++j) radix[pat[j]] =3D j;&#10;   /* Actual Boyer-Moore String Search =
Algorithm   */&#10;   for(int i =3D 0; i &amp;lt;=3D (N - M); i +=3D =
skip) {&#10;       skip =3D 0;&#10;       for(int j =3D M-1; j =
&amp;gt;=3D 0; --j) {&#10;           if(text[i + j] !=3D pat[j]) {&#10;  =
             skip =3D std::max(1, j - radix[pat[j]]);&#10;               =
break;&#10;           }&#10;       }&#10;       if(skip =3D=3D 0) return =
i;&#10;   }&#10;   return -1; &#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">// =
https://github.com/prashrock/CPP/blob/master/string/substring.h#L52</SPAN=
>=0A=
<SPAN class=3D"hljs-comment">/* Brute-force optimized                    =
              *=0A=
 * Best for : Short text and pattern                      *=0A=
 * Worst Case Time Complexity =3D O(NM) (Typical =3D O(1.1N)) *=0A=
 * Space Complexity           =3D O(1)                      */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">substring_opt</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> text, <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> pat)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(text.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN> || pat.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   size_t i, j;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(i =3D <SPAN =
class=3D"hljs-number">0</SPAN>, j =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; text.size() &amp;&amp; j &lt; =
pat.size(); ++i) {=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(text[i] =3D=3D pat[j]) ++j;=0A=
       <SPAN class=3D"hljs-keyword">else</SPAN> {  <SPAN =
class=3D"hljs-comment">/* Backtrack text by j and reset pat */</SPAN>=0A=
           i -=3D j;=0A=
           j  =3D <SPAN class=3D"hljs-number">0</SPAN>;=0A=
       }=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(j =3D=3D pat.size())  <SPAN =
class=3D"hljs-keyword">return</SPAN> (i - pat.size());=0A=
   <SPAN class=3D"hljs-keyword">else</SPAN>                 <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
}=0A=
<SPAN class=3D"hljs-comment">/* Boyer Moore Substring search algorithm:  =
                 *=0A=
 * Scan pattern chars from right to left. Skip as many as M  *=0A=
 * text chars when finding one char not in pattern.          *=0A=
 * Best for :Long pattern resembling natural text            *=0A=
 * Worst Case Time Complexity =3D O(MN) (Typical =3D O(N/M))     *=0A=
 * Space Complexity           =3D O(R) where R =3D Radix         *=0A=
 * Note - Radix is 256 (to support Extended ASCII char seq). *=0A=
 * Note - GNU grep uses Boyer Moore with unrolled inner loop */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">int</SPAN> =
<SPAN class=3D"hljs-title">substring_boyer_moore</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> text, <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> pat)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(text.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN> || pat.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>;=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; radix(<SPAN =
class=3D"hljs-number">256</SPAN>, -<SPAN class=3D"hljs-number">1</SPAN>);=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> N =3D text.size(), M =3D =
pat.size(), skip =3D <SPAN class=3D"hljs-number">0</SPAN>;=0A=
   <SPAN class=3D"hljs-comment">/*Only store last occur of each char in =
pattern */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> j =3D <SPAN =
class=3D"hljs-number">0</SPAN>; j &lt; M; ++j) radix[pat[j]] =3D j;=0A=
   <SPAN class=3D"hljs-comment">/* Actual Boyer-Moore String Search =
Algorithm   */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt;=3D (N - M); i +=3D skip) {=0A=
       skip =3D <SPAN class=3D"hljs-number">0</SPAN>;=0A=
       <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> j =3D M-<SPAN =
class=3D"hljs-number">1</SPAN>; j &gt;=3D <SPAN =
class=3D"hljs-number">0</SPAN>; --j) {=0A=
           <SPAN class=3D"hljs-keyword">if</SPAN>(text[i + j] !=3D =
pat[j]) {=0A=
               skip =3D <SPAN =
class=3D"hljs-built_in">std</SPAN>::max(<SPAN =
class=3D"hljs-number">1</SPAN>, j - radix[pat[j]]);=0A=
               <SPAN class=3D"hljs-keyword">break</SPAN>;=0A=
           }=0A=
       }=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(skip =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN> i;=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> -<SPAN =
class=3D"hljs-number">1</SPAN>; =0A=
}=0A=
</CODE></PRE></LI>
  <LI>Reverse vowels
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
string_reverse_words.cc#L42&#10;/* Write a function that takes a string =
as input and reverse only vowels.  *&#10; * Example 1: Given s =3D =
"hello", return "holle".                           */&#10;string =
reverseVowels(std::string s) {&#10;   const std::string vowels =3D =
"aeiouAEIOU";&#10;   for(int i =3D 0, j =3D (int)s.size()-1; i &amp;lt; =
j; ) {&#10;      /* Move the left pointer till we hit a vowel           =
*/&#10;      while(i &amp;lt; j &amp;amp;&amp;amp; vowels.find(s[i]) =
=3D=3D std::string::npos) i++;&#10;      /* Move the right pointer till =
we hit a vowel          */&#10;      while(i &amp;lt; j =
&amp;amp;&amp;amp; vowels.find(s[j]) =3D=3D std::string::npos) j--;&#10; =
     /* If we reach here and indexes are valid, time to swap*/&#10;      =
if(i &amp;lt; j) std::swap(s[i++], s[j--]);&#10;   }&#10;   return =
s;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_string_reverse_words.cc#L42</SPAN>=0A=
<SPAN class=3D"hljs-comment">/* Write a function that takes a string as =
input and reverse only vowels.  *=0A=
 * Example 1: Given s =3D "hello", return "holle".                       =
    */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-built_in">string</SPAN> <SPAN =
class=3D"hljs-title">reverseVowels</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> s)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">const</SPAN> <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> vowels =3D <SPAN =
class=3D"hljs-string">"aeiouAEIOU"</SPAN>;=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">int</SPAN> i =3D <SPAN =
class=3D"hljs-number">0</SPAN>, j =3D (<SPAN =
class=3D"hljs-keyword">int</SPAN>)s.size()-<SPAN =
class=3D"hljs-number">1</SPAN>; i &lt; j; ) {=0A=
      <SPAN class=3D"hljs-comment">/* Move the left pointer till we hit =
a vowel           */</SPAN>=0A=
      <SPAN class=3D"hljs-keyword">while</SPAN>(i &lt; j &amp;&amp; =
vowels.find(s[i]) =3D=3D <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN>::npos) i++;=0A=
      <SPAN class=3D"hljs-comment">/* Move the right pointer till we hit =
a vowel          */</SPAN>=0A=
      <SPAN class=3D"hljs-keyword">while</SPAN>(i &lt; j &amp;&amp; =
vowels.find(s[j]) =3D=3D <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN>::npos) j--;=0A=
      <SPAN class=3D"hljs-comment">/* If we reach here and indexes are =
valid, time to swap*/</SPAN>=0A=
      <SPAN class=3D"hljs-keyword">if</SPAN>(i &lt; j) <SPAN =
class=3D"hljs-built_in">std</SPAN>::swap(s[i++], s[j--]);=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> s;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Given a string, sort it in descending order based on freq of chars
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/ds_=
string_sort_chars_by_frequency.cc#L40&#10;/* Use a hash-table + custom =
sort lambda expression          *&#10; * Time complexity =3D O(nlgn) =
Space complexity =3D O(m) m chars */&#10; std::string =
frequencySort(std::string s) {&#10;   std::vector&amp;lt;int&amp;gt; =
freqTable(128, 0);&#10;   /* Maintain a freq table to maintain count of =
each char   */&#10;   for(auto c : s) freqTable[c]++;&#10;   /* =
Implement custom sort with a lambda expression         */&#10;   =
std::sort(s.begin(), s.end(), [&amp;amp;](const char a, const char b) =
{&#10;     return ( (freqTable[a] &amp;gt; freqTable[b]) ||&#10;         =
    ((freqTable[a] =3D=3D freqTable[b]) &amp;amp;&amp;amp; a &amp;lt; =
b));&#10;   });&#10;   return s;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/ds_string_sort_chars_by_frequency.cc#L40</SPAN>=0A=
<SPAN class=3D"hljs-comment">/* Use a hash-table + custom sort lambda =
expression          *=0A=
 * Time complexity =3D O(nlgn) Space complexity =3D O(m) m chars =
*/</SPAN>=0A=
 <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-function"><SPAN class=3D"hljs-built_in">string</SPAN> =
<SPAN class=3D"hljs-title">frequencySort</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">string</SPAN> s)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; freqTable(<SPAN =
class=3D"hljs-number">128</SPAN>, <SPAN class=3D"hljs-number">0</SPAN>);=0A=
   <SPAN class=3D"hljs-comment">/* Maintain a freq table to maintain =
count of each char   */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(<SPAN =
class=3D"hljs-keyword">auto</SPAN> c : s) freqTable[c]++;=0A=
   <SPAN class=3D"hljs-comment">/* Implement custom sort with a lambda =
expression         */</SPAN>=0A=
   <SPAN class=3D"hljs-built_in">std</SPAN>::sort(s.begin(), s.end(), =
[&amp;](<SPAN class=3D"hljs-keyword">const</SPAN> <SPAN =
class=3D"hljs-keyword">char</SPAN> a, <SPAN =
class=3D"hljs-keyword">const</SPAN> <SPAN =
class=3D"hljs-keyword">char</SPAN> b) {=0A=
     <SPAN class=3D"hljs-keyword">return</SPAN> ( (freqTable[a] &gt; =
freqTable[b]) ||=0A=
             ((freqTable[a] =3D=3D freqTable[b]) &amp;&amp; a &lt; b));=0A=
   });=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> s;=0A=
}=0A=
</CODE></PRE></LI>
  <LI>Reverse words in a string ?</LI></UL>
<H3 id=3D"hash"><A name=3D"hash" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#hash"></A>Hash</H3>
<UL>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Math/Probabili=
ty.html#[birthday-problem](./coursera_probability_upenn/tab3_birthday_par=
adox.pdf">Birthday=20
  paradox</A>)</LI>
  <LI>Good hash functions ? (Jenkins, Murmur3)</LI>
  <LI>Linux uses Jenkin=E2=80=99s hash (__inet_ehashfn(SIP, DIP, SP, =
DP)) for TCP=20
  connection lookup</LI>
  <LI>MD5 is 16B in size (128 bits), SHA-1 is 20B in size (160 bits), =
while=20
  SHA-2 (SHA256) is 32B in size (256 bits)
  <UL>
    <LI>Use birthday paradox to calculate collision =
probability.</LI></UL></LI></UL>
<H3 id=3D"heap"><A name=3D"heap" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#heap"></A>Heap</H3>
<UL>
  <LI>Simplified binary heap implementation ?</LI></UL>
<H3 id=3D"graph"><A name=3D"graph" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#graph"></A>Graph</H3>
<UL>
  <LI>DFS ?</LI>
  <LI>Euler path ?</LI>
  <LI>Topological sort ?</LI></UL>
<H3 id=3D"probabilistic-ds"><A name=3D"probabilistic-ds" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#probabilistic-ds"></A>Probabilistic=20
DS</H3>
<UL>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Data_Structure=
s/CS_DS_Probabilistic.html#overview">Probabilistic=20
  Data Structures contains more details about below probabilistic =
DSs</A>
  <TABLE>=20
    <THEAD>
    <TR>
      <TH style=3D"text-align: center;">Algorithm</TH>
      <TH style=3D"text-align: left;">Key Property</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: center;">Bloom Filter</TD>
      <TD style=3D"text-align: left;">Is this element a member of a set =
?=20
        (<STRONG>Cardinality Estimation without False =
Negatives</STRONG>)</TD></TR>
    <TR>
      <TD style=3D"text-align: center;">Count-Min Sketch</TD>
      <TD style=3D"text-align: left;">Can we <STRONG>count element =
frequencies=20
        using sub-linear space</STRONG>?</TD></TR>
    <TR>
      <TD style=3D"text-align: center;">HyperLogLog</TD>
      <TD style=3D"text-align: left;">How do we count =
<STRONG>distinct</STRONG>=20
        things in a stream ? <BR> E.g. how many different words are used =
in=20
        Wikipedia? <BR> Tracks highest number of leading zeros in=20
    hash</TD></TR></TBODY></TABLE></LI></UL>
<HR class=3D"section">

<H2 id=3D"math"><A name=3D"math" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#math"></A>Math</H2>
<H3 id=3D"lcm-and-gcd"><A name=3D"lcm-and-gcd" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#lcm-and-gcd"></A>LCM=20
and GCD</H3>
<UL>
  <LI>GCD of 2 or more integers (atleast one is not zero), is the =
largest=20
  positive integer that divides the numbers without a remainder.
  <UL>
    <LI><A =
href=3D"https://github.com/prashrock/C/blob/master/math/math_prime.h#L46"=
>Refer=20
    to Euclidean GCD implementation</A></LI>
    <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Math/math.html=
#lcm-and-gcd-(hcf">Refer=20
    to GCD/LCM notes</A>) </LI></UL></LI></UL>
<H3 id=3D"sampling"><A name=3D"sampling" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#sampling"></A>Sampling</H3>
<UL>
  <LI>See Reservoir random sampling code <A =
href=3D"https://github.com/prashrock/C/blob/master/rand/reservoir_rand_sa=
mple.c#L15">here</A></LI></UL>
<H3 id=3D"leader-election"><A name=3D"leader-election" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#leader-election"></A>Leader=20
Election</H3>
<UL>
  <LI>Select majority element (element occuring more than n/2 times)
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/C/blob/master/distributed/el=
ection.h&#10;bool =
boyer_moore_majority_vote(std::vector&amp;lt;int&amp;gt; arr, int =
&amp;amp;result)&#10;{&#10;   int n =3D arr.size();&#10;   int =
candidate, count =3D 0, i;&#10;   /* First Pass */&#10;   for(i =3D 0; i =
&amp;lt; n; i++) {&#10;       if(count =3D=3D 0)          candidate =3D =
arr[i];&#10;       if(candidate =3D=3D arr[i]) count++;&#10;       else  =
                  count--;&#10;   }&#10;   //Manually verify if =
candidate occurs &amp;gt; n/2 elements (excluding that code)&#10;   =
result =3D candidate;&#10;   return true;&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/C/blob/master/distr=
ibuted/election.h</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">boyer_moore_majority_vote</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt; arr, <SPAN =
class=3D"hljs-keyword">int</SPAN> &amp;result)</SPAN>=0A=
</SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> n =3D arr.size();=0A=
   <SPAN class=3D"hljs-keyword">int</SPAN> candidate, count =3D <SPAN =
class=3D"hljs-number">0</SPAN>, i;=0A=
   <SPAN class=3D"hljs-comment">/* First Pass */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">for</SPAN>(i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; n; i++) {=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(count =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>)          candidate =3D arr[i];=0A=
       <SPAN class=3D"hljs-keyword">if</SPAN>(candidate =3D=3D arr[i]) =
count++;=0A=
       <SPAN class=3D"hljs-keyword">else</SPAN>                    =
count--;=0A=
   }=0A=
   <SPAN class=3D"hljs-comment">//Manually verify if candidate occurs =
&gt; n/2 elements (excluding that code)</SPAN>=0A=
   result =3D candidate;=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> <SPAN =
class=3D"hljs-keyword">true</SPAN>;=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"shuffle"><A name=3D"shuffle" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#shuffle"></A>Shuffle</H3>
<UL>
  <LI>Randomly shuffle a given input vector.
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//The total number of permutations with below loop =3D =
n!&#10;//https://github.com/prashrock/CPP/blob/master/math/math_shuffle.h=
&#10;template&amp;lt;typename T=3Dint&amp;gt;&#10;static inline void =
shuffle(std::vector&amp;lt;T&amp;gt;&amp;amp; inp) noexcept {&#10;    =
if(inp.size() =3D=3D 0) return;      /* Handle 0 size vectors */&#10;    =
const size_t N =3D inp.size();&#10;    for(size_t i =3D N; i &amp;gt; 1; =
--i) {  /*consider using uint32_t*/&#10;       const auto j =3D =
get_rand(i);      /* 0 &amp;lt;=3D j &amp;lt; i         */&#10;       =
std::swap(inp[i - 1], inp[j]);&#10;    }&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//The total number of permutations with below =
loop =3D n!</SPAN>=0A=
<SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/mat=
h/math_shuffle.h</SPAN>=0A=
<SPAN class=3D"hljs-keyword">template</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">typename</SPAN> T=3D<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">static</SPAN> =
<SPAN class=3D"hljs-keyword">inline</SPAN> <SPAN =
class=3D"hljs-keyword">void</SPAN> <SPAN =
class=3D"hljs-title">shuffle</SPAN><SPAN class=3D"hljs-params">(<SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;T&gt;&amp; inp)</SPAN> <SPAN =
class=3D"hljs-keyword">noexcept</SPAN> </SPAN>{=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(inp.size() =3D=3D <SPAN =
class=3D"hljs-number">0</SPAN>) <SPAN =
class=3D"hljs-keyword">return</SPAN>;      <SPAN =
class=3D"hljs-comment">/* Handle 0 size vectors */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">const</SPAN> size_t N =3D inp.size();=0A=
    <SPAN class=3D"hljs-keyword">for</SPAN>(size_t i =3D N; i &gt; <SPAN =
class=3D"hljs-number">1</SPAN>; --i) {  <SPAN =
class=3D"hljs-comment">/*consider using uint32_t*/</SPAN>=0A=
       <SPAN class=3D"hljs-keyword">const</SPAN> <SPAN =
class=3D"hljs-keyword">auto</SPAN> j =3D get_rand(i);      <SPAN =
class=3D"hljs-comment">/* 0 &lt;=3D j &lt; i         */</SPAN>=0A=
       <SPAN class=3D"hljs-built_in">std</SPAN>::swap(inp[i - <SPAN =
class=3D"hljs-number">1</SPAN>], inp[j]);=0A=
    }=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"permutate"><A name=3D"permutate" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#permutate"></A>Permutate</H3>
<UL>
  <LI>Look at <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Math/math.html=
#permutation,-arrangement-&amp;-combination">Math=20
  notes on Permutation and Combination</A>
  <UL>=20
    <LI>Remember, <A =
href=3D"http://math.stackexchange.com/questions/1194584/the-total-number-=
of-subarrays">total=20
    number of sub-arrays</A> in a given array of size n is a =
combinations=20
    problem. Imagine each number to be prefixed by dots, there are total =
of n+1=20
    dots.</LI>
    <LI>So, number of possible sub-arrays =3D number of combinations of =
positions=20
    before and after each index =3D (n+1)C2 =3D n(n+1)/2</LI></UL></LI>
  <LI>Look at <A =
href=3D"https://github.com/prashrock/CPP/blob/master/leetcode/math_permut=
ate.cc#L30">Dijkstra=20
  Permutation generator</A> implementation to generate permutations=20
  <STRONG>without repetition</STRONG>.
  <UL>
    <LI>Sort input sequence.</LI>
    <LI>No more permutations are possible if the array is fully sorted =
in=20
    reverse direction:
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/mat=
h_permutate.cc#L49&#10;bool hasNextPermutation(const =
std::vector&amp;lt;int&amp;gt;&amp;amp; n) {&#10;/* check if =
is_sorted_until returns reverse end of vec  */&#10;return =
(is_sorted_until(n.rbegin(), n.rend()) !=3D n.rend());&#10;}&#10;/** =
@brief Get next permutation if one exists else do no-op*&#10;* Example, =
given 1342, it will point to 3 (first unsorted *&#10;* value from Right =
end). Next, swap with the next highest *&#10;* value to RHS. In this =
case swap with 4.                 *&#10;* Rotate all in-between numbers =
in range [it, n-1]        */&#10;bool =
nextPermutation(std::vector&amp;lt;int&amp;gt;&amp;amp; nums) {&#10; =
auto it =3D nums.rend();&#10; /* Only if there is one more permutation, =
fix up array  */&#10; if(hasNextPermutation(nums)) {&#10;    it =3D =
is_sorted_until(nums.rbegin(), nums.rend());&#10;    std::swap(*it, =
*std::upper_bound(nums.rbegin(), it, *it));&#10; }&#10; =
std::reverse(nums.rbegin(), it);&#10; return (it !=3D =
nums.rend());&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/math_permutate.cc#L49</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">hasNextPermutation</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-keyword">const</SPAN> <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; n)</SPAN> </SPAN>{=0A=
<SPAN class=3D"hljs-comment">/* check if is_sorted_until returns reverse =
end of vec  */</SPAN>=0A=
<SPAN class=3D"hljs-keyword">return</SPAN> (is_sorted_until(n.rbegin(), =
n.rend()) !=3D n.rend());=0A=
}=0A=
<SPAN class=3D"hljs-comment">/** @brief Get next permutation if one =
exists else do no-op*=0A=
* Example, given 1342, it will point to 3 (first unsorted *=0A=
* value from Right end). Next, swap with the next highest *=0A=
* value to RHS. In this case swap with 4.                 *=0A=
* Rotate all in-between numbers in range [it, n-1]        */</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">bool</SPAN> =
<SPAN class=3D"hljs-title">nextPermutation</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums)</SPAN> </SPAN>{=0A=
 <SPAN class=3D"hljs-keyword">auto</SPAN> it =3D nums.rend();=0A=
 <SPAN class=3D"hljs-comment">/* Only if there is one more permutation, =
fix up array  */</SPAN>=0A=
 <SPAN class=3D"hljs-keyword">if</SPAN>(hasNextPermutation(nums)) {=0A=
    it =3D is_sorted_until(nums.rbegin(), nums.rend());=0A=
    <SPAN class=3D"hljs-built_in">std</SPAN>::swap(*it, *<SPAN =
class=3D"hljs-built_in">std</SPAN>::upper_bound(nums.rbegin(), it, *it));=0A=
 }=0A=
 <SPAN class=3D"hljs-built_in">std</SPAN>::reverse(nums.rbegin(), it);=0A=
 <SPAN class=3D"hljs-keyword">return</SPAN> (it !=3D nums.rend());=0A=
}=0A=
</CODE></PRE></LI></UL></LI>
  <LI>Also look at <A =
href=3D"https://github.com/prashrock/CPP/blob/master/leetcode/math_permut=
ate.cc#L70">Heap=20
  Permutation Generator</A> implementation to generate permutations =
<STRONG>with=20
  repetition</STRONG>.
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">/** @brief Heap permute: Permute input array with =
repetitions @  *&#10; * A.Levitin, Introduction to =
Design&amp;amp;Analysis of Algorithms(179) *&#10; * Number of =
permutations (without repetition) =3D nPn =3D n!        *&#10; * Note: =
Algorithm does not differentiate between strings with   *&#10; * =
repeating characters and strings without. Therefore, output   *&#10; * =
permutations need not be unique                               *&#10; * =
@ret total number of permutations done                        =
*/&#10;unsigned long =
heapPermutation(std::vector&amp;lt;int&amp;gt;&amp;amp; nums,&#10;       =
                       =
std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; =
ans,&#10;                              const size_t n) {&#10;   unsigned =
long tot =3D 0; /* Tracks the total #permutations      */&#10;   if(n =
=3D=3D 1) { ans.push_back(nums); tot =3D 1; }&#10;   else {&#10;       =
for(size_t i =3D 0; i &amp;lt; n; ++i) {&#10;          tot +=3D =
heapPermutation(nums, ans, n-1);&#10;          if(n % 2 =3D=3D 1) =
std::swap(nums[0], nums[n-1]); /* Odd    */&#10;          else           =
std::swap(nums[i], nums[n-1]); /* Even   */&#10;       }&#10;   }&#10;   =
return tot;&#10;}&#10;</code></pre>'><SPAN class=3D"hljs-comment">/** =
@brief Heap permute: Permute input array with repetitions @  *=0A=
 * A.Levitin, Introduction to Design&amp;Analysis of Algorithms(179) *=0A=
 * Number of permutations (without repetition) =3D nPn =3D n!        *=0A=
 * Note: Algorithm does not differentiate between strings with   *=0A=
 * repeating characters and strings without. Therefore, output   *=0A=
 * permutations need not be unique                               *=0A=
 * @ret total number of permutations done                        =
*/</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">unsigned</SPAN> <SPAN =
class=3D"hljs-keyword">long</SPAN> <SPAN =
class=3D"hljs-title">heapPermutation</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums,=0A=
                              <SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&gt;&amp; ans,=0A=
                              <SPAN class=3D"hljs-keyword">const</SPAN> =
size_t n)</SPAN> </SPAN>{=0A=
   <SPAN class=3D"hljs-keyword">unsigned</SPAN> <SPAN =
class=3D"hljs-keyword">long</SPAN> tot =3D <SPAN =
class=3D"hljs-number">0</SPAN>; <SPAN class=3D"hljs-comment">/* Tracks =
the total #permutations      */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(n =3D=3D <SPAN =
class=3D"hljs-number">1</SPAN>) { ans.push_back(nums); tot =3D <SPAN =
class=3D"hljs-number">1</SPAN>; }=0A=
   <SPAN class=3D"hljs-keyword">else</SPAN> {=0A=
       <SPAN class=3D"hljs-keyword">for</SPAN>(size_t i =3D <SPAN =
class=3D"hljs-number">0</SPAN>; i &lt; n; ++i) {=0A=
          tot +=3D heapPermutation(nums, ans, n-<SPAN =
class=3D"hljs-number">1</SPAN>);=0A=
          <SPAN class=3D"hljs-keyword">if</SPAN>(n % <SPAN =
class=3D"hljs-number">2</SPAN> =3D=3D <SPAN =
class=3D"hljs-number">1</SPAN>) <SPAN =
class=3D"hljs-built_in">std</SPAN>::swap(nums[<SPAN =
class=3D"hljs-number">0</SPAN>], nums[n-<SPAN =
class=3D"hljs-number">1</SPAN>]); <SPAN class=3D"hljs-comment">/* Odd    =
*/</SPAN>=0A=
          <SPAN class=3D"hljs-keyword">else</SPAN>           <SPAN =
class=3D"hljs-built_in">std</SPAN>::swap(nums[i], nums[n-<SPAN =
class=3D"hljs-number">1</SPAN>]); <SPAN class=3D"hljs-comment">/* Even   =
*/</SPAN>=0A=
       }=0A=
   }=0A=
   <SPAN class=3D"hljs-keyword">return</SPAN> tot;=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"prime-number-generation"><A name=3D"prime-number-generation" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#prime-number-generation"></A>Prime=20
Number Generation</H3>
<UL>
  <LI>Look at <A =
href=3D"https://github.com/prashrock/CPP/blob/master/math/math_prime.h#L1=
2">Seive=20
  of Eratosthenes</A> implementation.
  <UL>
    <LI>Maintain a bitmap for [1, N]. For each i in [1, N), generate all =

    multiples and reset their bits in the bitmap.</LI>
    <LI>All remaining bits are prime numbers.  </LI></UL></LI></UL>
<H3 id=3D"rotate-array"><A name=3D"rotate-array" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#rotate-array"></A>Rotate=20
Array</H3>
<UL>
  <LI>Rotate an array clockwise/anti-clockwise
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/CPP/blob/master/leetcode/mat=
h_rotate_array_matrix.cc#L56&#10;/**  @brief - Approach-2: Rotate by =
reversing 3 times        *&#10; *   Good for Bidirectional iterators     =
                   *&#10; *   Time Complexity =3D O(n)    Space =
Complexity =3D O(1)       */&#10;void =
rotate_array2(std::vector&amp;lt;int&amp;gt;&amp;amp; nums, int k,&#10;  =
                 enum rotDirection dir=3DClockwise) {&#10;   k =3D k % =
nums.size();    /* reduce k to range [0, n-1]     */&#10;   if(dir =
=3D=3D Clockwise &amp;amp;&amp;amp; k &amp;gt; 0) {&#10;      =
std::reverse(nums.begin(), nums.end());     /* Rev [0,n) */&#10;      =
std::reverse(nums.begin(), nums.begin()+k); /* Rev [0,k) */&#10;      =
std::reverse(nums.begin()+k, nums.end());   /* Rev [k,n) */&#10;   =
}&#10;   else if(dir =3D=3D AntiClockwise &amp;amp;&amp;amp; k &amp;gt; =
0) {&#10;      const size_t n =3D nums.size();&#10;      =
std::reverse(nums.begin(), nums.end());       /* Rev [0,n) */&#10;      =
std::reverse(nums.begin(), nums.begin()+n-k); /* Reverse [0, n-k) =
*/&#10;      std::reverse(nums.begin()+n-k, nums.end());   /* Rev [n-k =
,n) */&#10;   }&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/CPP/blob/master/lee=
tcode/math_rotate_array_matrix.cc#L56</SPAN>=0A=
<SPAN class=3D"hljs-comment">/**  @brief - Approach-2: Rotate by =
reversing 3 times        *=0A=
 *   Good for Bidirectional iterators                        *=0A=
 *   Time Complexity =3D O(n)    Space Complexity =3D O(1)       =
*/</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">void</SPAN> =
<SPAN class=3D"hljs-title">rotate_array2</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-built_in">std</SPAN>::<SPAN =
class=3D"hljs-built_in">vector</SPAN>&lt;<SPAN =
class=3D"hljs-keyword">int</SPAN>&gt;&amp; nums, <SPAN =
class=3D"hljs-keyword">int</SPAN> k,=0A=
                   <SPAN class=3D"hljs-keyword">enum</SPAN> rotDirection =
dir=3DClockwise)</SPAN> </SPAN>{=0A=
   k =3D k % nums.size();    <SPAN class=3D"hljs-comment">/* reduce k to =
range [0, n-1]     */</SPAN>=0A=
   <SPAN class=3D"hljs-keyword">if</SPAN>(dir =3D=3D Clockwise =
&amp;&amp; k &gt; <SPAN class=3D"hljs-number">0</SPAN>) {=0A=
      <SPAN class=3D"hljs-built_in">std</SPAN>::reverse(nums.begin(), =
nums.end());     <SPAN class=3D"hljs-comment">/* Rev [0,n) */</SPAN>=0A=
      <SPAN class=3D"hljs-built_in">std</SPAN>::reverse(nums.begin(), =
nums.begin()+k); <SPAN class=3D"hljs-comment">/* Rev [0,k) */</SPAN>=0A=
      <SPAN class=3D"hljs-built_in">std</SPAN>::reverse(nums.begin()+k, =
nums.end());   <SPAN class=3D"hljs-comment">/* Rev [k,n) */</SPAN>=0A=
   }=0A=
   <SPAN class=3D"hljs-function"><SPAN =
class=3D"hljs-keyword">else</SPAN> <SPAN =
class=3D"hljs-title">if</SPAN><SPAN class=3D"hljs-params">(dir =3D=3D =
AntiClockwise &amp;&amp; k &gt; 0)</SPAN> </SPAN>{=0A=
      <SPAN class=3D"hljs-keyword">const</SPAN> size_t n =3D nums.size();=0A=
      <SPAN class=3D"hljs-built_in">std</SPAN>::reverse(nums.begin(), =
nums.end());       <SPAN class=3D"hljs-comment">/* Rev [0,n) */</SPAN>=0A=
      <SPAN class=3D"hljs-built_in">std</SPAN>::reverse(nums.begin(), =
nums.begin()+n-k); <SPAN class=3D"hljs-comment">/* Reverse [0, n-k) =
*/</SPAN>=0A=
      <SPAN =
class=3D"hljs-built_in">std</SPAN>::reverse(nums.begin()+n-k, =
nums.end());   <SPAN class=3D"hljs-comment">/* Rev [n-k ,n) */</SPAN>=0A=
   }=0A=
}=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"random-sampling---reservoir-sampling"><A =
name=3D"random-sampling---reservoir-sampling"=20
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#random-sampling---reservoir-sampling"></A>Random=20
Sampling - Reservoir sampling</H3>
<UL>
  <LI>Randomly chose k samples from a stream of n items (where n is =
typically=20
  large)</LI>
  <LI>Algorithm:
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">//https://github.com/prashrock/C/blob/master/rand/reservoir=
_rand_sample.c#L19&#10;/** Get k random samples from a huge/infinite =
input stream      *&#10; * Have to call this function for each input =
stream value       *&#10; * Time Complexity =3D O(n)                     =
                  *&#10; * Space Complexity =3D O(k)                     =
                 */&#10;static inline void reservoir_sample(int *sample, =
int *stream_val,&#10;                                      unsigned int =
stream_idx, int k)&#10;{&#10;    /* If input stream idx &amp;lt; sample =
idx, store number */&#10;    if(stream_idx &amp;lt; k)   =
sample[stream_idx] =3D *stream_val;&#10;    else {&#10;        /* =
Generate a random number between 0 to stream_idx */&#10;        int j =
=3D get_rand_int() % (stream_idx + 1);&#10;        if(j &amp;lt; k)      =
  sample[j] =3D *stream_val;&#10;    }    =
&#10;}&#10;</code></pre>'><SPAN =
class=3D"hljs-comment">//https://github.com/prashrock/C/blob/master/rand/=
reservoir_rand_sample.c#L19</SPAN>=0A=
<SPAN class=3D"hljs-comment">/** Get k random samples from a =
huge/infinite input stream      *=0A=
 * Have to call this function for each input stream value       *=0A=
 * Time Complexity =3D O(n)                                       *=0A=
 * Space Complexity =3D O(k)                                      =
*/</SPAN>=0A=
<SPAN class=3D"hljs-function"><SPAN class=3D"hljs-keyword">static</SPAN> =
<SPAN class=3D"hljs-keyword">inline</SPAN> <SPAN =
class=3D"hljs-keyword">void</SPAN> <SPAN =
class=3D"hljs-title">reservoir_sample</SPAN><SPAN =
class=3D"hljs-params">(<SPAN class=3D"hljs-keyword">int</SPAN> *sample, =
<SPAN class=3D"hljs-keyword">int</SPAN> *stream_val,=0A=
                                      <SPAN =
class=3D"hljs-keyword">unsigned</SPAN> <SPAN =
class=3D"hljs-keyword">int</SPAN> stream_idx, <SPAN =
class=3D"hljs-keyword">int</SPAN> k)</SPAN>=0A=
</SPAN>{=0A=
    <SPAN class=3D"hljs-comment">/* If input stream idx &lt; sample idx, =
store number */</SPAN>=0A=
    <SPAN class=3D"hljs-keyword">if</SPAN>(stream_idx &lt; k)   =
sample[stream_idx] =3D *stream_val;=0A=
    <SPAN class=3D"hljs-keyword">else</SPAN> {=0A=
        <SPAN class=3D"hljs-comment">/* Generate a random number between =
0 to stream_idx */</SPAN>=0A=
        <SPAN class=3D"hljs-keyword">int</SPAN> j =3D get_rand_int() % =
(stream_idx + <SPAN class=3D"hljs-number">1</SPAN>);=0A=
        <SPAN class=3D"hljs-keyword">if</SPAN>(j &lt; k)        =
sample[j] =3D *stream_val;=0A=
    }    =0A=
}=0A=
</CODE></PRE></LI>
  <LI>Refer to <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Algo/Random.ht=
ml#reservoir-sampling-(random-k-from-n">Reservoir=20
  sampling notes</A> for proof.</LI></UL>
<H3 id=3D"probability"><A name=3D"probability" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#probability"></A>Probability</H3>
<UL>
  <LI>Birthday problem (hash collision) ?</LI>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/Math/M=
ath_Probability.html">Other=20
  math questions</A></LI>
  <LI>Disjoint vs Independent:
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Disjoint (Mutually Exclusive)</TH>
      <TH style=3D"text-align: left;">Independent</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;">Two events that cannot happen at =
the same=20
        time.</TD>
      <TD style=3D"text-align: left;">Knowing the outcome of one =
independent=20
        process provides no useful information about the outcome of the=20
    other.</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">P(A and B) =3D 0</TD>
      <TD style=3D"text-align: left;">P(A | B) =3D =
P(A)</TD></TR></TBODY></TABLE>
  <UL>
    <LI>Note: the outcomes of a single coin toss are disjoint while =
outcomes of=20
    two coin tosses are independent. </LI></UL></LI></UL>
<HR class=3D"section">

<H2 id=3D"networking"><A name=3D"networking" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#networking"></A>Networking</H2>
<UL>
  <LI>OSI layers and nomenclature:
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">#</TH>
      <TH style=3D"text-align: left;">Layer</TH>
      <TH style=3D"text-align: left;">Payload name</TH>
      <TH style=3D"text-align: left;">Purpose</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;">7</TD>
      <TD style=3D"text-align: left;">Application</TD>
      <TD style=3D"text-align: left;">Data</TD>
      <TD style=3D"text-align: left;">Network aware applications =
(browser,=20
        email, etc)</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">6</TD>
      <TD style=3D"text-align: left;">Presentation</TD>
      <TD style=3D"text-align: left;"></TD>
      <TD style=3D"text-align: left;">Encryption, Compression, =
Translation</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">5</TD>
      <TD style=3D"text-align: left;">Session</TD>
      <TD style=3D"text-align: left;"></TD>
      <TD style=3D"text-align: left;">Login/Rights and =
permissions</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">4</TD>
      <TD style=3D"text-align: left;">Transport</TD>
      <TD style=3D"text-align: left;">Segment</TD>
      <TD style=3D"text-align: left;">Guarantee end-end delivery of =
data</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">3</TD>
      <TD style=3D"text-align: left;">Network</TD>
      <TD style=3D"text-align: left;">Datagram</TD>
      <TD style=3D"text-align: left;">Find shortest path to destination=20
      network</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">2</TD>
      <TD style=3D"text-align: left;">Datalink</TD>
      <TD style=3D"text-align: left;">Frame</TD>
      <TD style=3D"text-align: left;">Decides whose turn is it to talk =
(avoid=20
        collision domain) <BR> Find physical device in network</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">1</TD>
      <TD style=3D"text-align: left;">Physical</TD>
      <TD style=3D"text-align: left;">Bits</TD>
      <TD style=3D"text-align: left;">Physical part of=20
  network</TD></TR></TBODY></TABLE></LI></UL>
<H3 id=3D"terms"><A name=3D"terms" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#terms"></A>Terms</H3>
<UL>
  <LI>ARP
  <UL>
    <LI>Address resolution protocol. Find <STRONG>Ethernet address given =
IP=20
    address</STRONG></LI></UL></LI>
  <LI>Switch
  <UL>
    <LI>Switch uses MAC addresses to forward packets.</LI>
    <LI>Switch creates a <STRONG>single broadcast domain but breaks down =

    collision domains - seperate collision domains on each =
port</STRONG>.</LI>
    <LI>A switch differs from a hub in the sense it makes =
decisions.</LI>
    <LI>Switch automatically learns port/MAC mappings in real-time and =
stores=20
    this information in its <STRONG>MAC table (forward filter=20
    table)</STRONG></LI></UL></LI>
  <LI>VLAN
  <UL>
    <LI>VLANs reside in Layer 2 of the OSI model. VLANs help break up =
broadcast=20
    domains in a switched network.</LI>
    <LI>Virtual LAN creates a logical grouping of devices in the =
<STRONG>same=20
    broadcast domain</STRONG>.</LI>
    <LI>VLANs allow network topology to be rearranged on demand (in =
software)=20
    without the need to move physical cables.</LI>
    <LI>VLANs also allow multiple separate layer-2 networks to share the =
same=20
    physical link, allowing for more flexible and cost-effective cabling =

    layouts.</LI></UL></LI>
  <LI>VxLAN
  <UL>
    <LI>L2 network on L3 transport. VM sends L2 packet, hypervisor adds=20
    Eth+IP+UDP and uses IP Multicast to send VxLAN broadcast.</LI>
    <LI>Core network (backbone for VM L2 network) needs to be only IP =
multicast=20
    aware.</LI></UL></LI>
  <LI>MTU
  <UL>
    <LI>MTU (Maximum transmission unit) is the maximum length of data =
that can=20
    be transmitted by a protocol in one instance. </LI>
    <LI>MTU of an ethernet interface is 1500B by default. MTU =
<STRONG>excludes=20
    the Ethernet header and Ethernet trailer (FCS)</STRONG>.</LI>
    <LI>PMTUD (Path MTU Discovery (PMTUD)) is a standard technique to =
determine=20
    the MTU on a network to avoid IP fragmentation.</LI></UL></LI>
  <LI>IP
  <UL>
    <LI><A =
href=3D"file:///C:/Backup/Dropbox/Notes/Networking/CS_Networking.html#l3-=
--ip">Internetwork=20
    protocol</A> is an <STRONG>unreliable/best-effort and connectionless =

    datagram protocol. It provides no error checking and =
tracking</STRONG></LI>
    <LI>If service quality features such as connections, error-checking =
or=20
    guaranteed delivery are required by an application, they are =
provided at the=20
    transport layer (or possibly, the application layer).</LI></UL></LI>
  <LI>IPv6
  <UL>
    <LI>Larger Address Space, 128-bit addressing gives 2^128 addresses =
compared=20
    to 32-bit addressing (2^32) from IPv4.</LI>
    <LI>No DHCP needed, IPv6 supports stateless auto-configuration =
(SLAAC)</LI>
    <LI>IPv6 eliminates use of broadcast. IPv6 reduces size of =
route-table with=20
    hierarchical address structure.</LI>
    <LI>Only source node can fragment a packet. Intermediate nodes =
cannot=20
    perform packet fragmentation.</LI></UL></LI>
  <LI>TCP
  <UL>
    <LI>A full-featured, connection-oriented, reliable transport =
protocol that=20
    provides acknowledged delivery of data while managing traffic flow =
and=20
    handling issues such as congestion and transmission =
loss.</LI></UL></LI>
  <LI>TCP State machine ?</LI>
  <LI>MSS
  <UL>
    <LI>MSS is the maximum TCP segment size. <STRONG>MSS excludes TCP =
header=20
    size</STRONG>.</LI>
    <LI>MSS is decided during TCP 3-way handshake for complete TCP =
session.</LI>
    <LI>Default MSS =3D Minimum_MTU - IP_HDR_SIZE - TCP_HDR_SIZE =3D 576 =
- 20 - 20 =3D=20
    <STRONG>536B</STRONG> (Data : Header ratio =3D 536 : 40 =3D 93%=20
  data)</LI></UL></LI>
  <LI>How can a server scale up to million concurrent TCP connections =
with a=20
  single IP ?
  <UL>
    <LI><SPAN><SPAN class=3D"MathJax_Preview"></SPAN><SPAN =
class=3D"MathJax" id=3D"MathJax-Element-3-Frame"=20
    role=3D"textbox" aria-readonly=3D"true"><NOBR><SPAN class=3D"math" =
id=3D"MathJax-Span-9"=20
    style=3D"width: 1.68em; display: inline-block;"><SPAN =
style=3D"width: 1.36em; height: 0px; font-size: 122%; display: =
inline-block; position: relative;"><SPAN=20
    style=3D"left: 0em; top: -2.18em; position: absolute; clip: =
rect(1.15em, 1000em, 2.35em, -0.44em);"><SPAN=20
    class=3D"mrow" id=3D"MathJax-Span-10"><SPAN class=3D"msubsup"=20
    id=3D"MathJax-Span-11"><SPAN style=3D"width: 1.33em; height: 0px; =
display: inline-block; position: relative;"><SPAN=20
    style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.84em, -0.44em);"><SPAN=20
    class=3D"mn" id=3D"MathJax-Span-12"=20
    style=3D"font-family: MathJax_Main;">2</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
    style=3D"left: 0.54em; top: -2.74em; position: absolute;"><SPAN =
class=3D"texatom"=20
    id=3D"MathJax-Span-13"><SPAN class=3D"mrow" =
id=3D"MathJax-Span-14"><SPAN class=3D"mn"=20
    id=3D"MathJax-Span-15"=20
    style=3D"font-family: MathJax_Main; font-size: =
70.7%;">16</SPAN></SPAN></SPAN><SPAN=20
    style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN=20
    style=3D"width: 0px; height: 2.18em; display: =
inline-block;"></SPAN></SPAN></SPAN><SPAN=20
    style=3D"width: 0px; height: 1.18em; overflow: hidden; =
vertical-align: -0.06em; border-left-width: 0em; border-left-style: =
solid; display: inline-block;"></SPAN></SPAN></NOBR></SPAN>
<SCRIPT id=3D"MathJax-Element-3" type=3D"math/tex">2^{16}</SCRIPT>
    </SPAN> limit is the number of ports avaialble for a single IP =
address.</LI>
    <LI>The <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Networking/CS_=
Networking.html#server-side-number-of-tcp-ports">misunderstanding</A>=20
    comes from the fact that the <STRONG>server does not use its =
listening IP=20
    address and a different ephemeral port</STRONG> for each new socket =
to=20
    distinguish among the sockets</LI>
    <LI>It uses the same listening IP address and the same listening =
port for=20
    all sockets and it <STRONG>distinguishes among sockets by using the =
IP=20
    address and the ephemeral port of each =
client</STRONG>.</LI></UL></LI>
  <LI>What happens underneath when two machines communicate via HTTP ?
  <UL>
    <LI>Refer to detailed answer <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Networking/CS_=
Networking.html#http">here</A></LI></UL></LI>
  <LI>What are some common HTTP status codes ?
  <UL>
    <LI>High level overview of code and meanings:
    <TABLE>
      <THEAD>
      <TR>
        <TH style=3D"text-align: left;">Code</TH>
        <TH style=3D"text-align: left;">Meaning</TH></TR></THEAD>
      <TBODY>
      <TR>
        <TD style=3D"text-align: left;">1xx</TD>
        <TD style=3D"text-align: left;">Informational response</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">2xx</TD>
        <TD style=3D"text-align: left;">Successful response</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">3xx</TD>
        <TD style=3D"text-align: left;">Redirection response</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">4xx</TD>
        <TD style=3D"text-align: left;">Client side errors</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">5xx</TD>
        <TD style=3D"text-align: left;">Server side=20
    errors</TD></TR></TBODY></TABLE></LI>
    <LI>Important codes and their meanings:
    <TABLE>
      <THEAD>
      <TR>
        <TH style=3D"text-align: left;">Code</TH>
        <TH style=3D"text-align: left;">Meaning</TH></TR></THEAD>
      <TBODY>
      <TR>
        <TD style=3D"text-align: left;">200</TD>
        <TD style=3D"text-align: left;">Successful response to the =
request</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">404</TD>
        <TD style=3D"text-align: left;">Requested resource is no longer=20
          available (or just not found)</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">401</TD>
        <TD style=3D"text-align: left;">Unauthorized errors</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">403</TD>
        <TD style=3D"text-align: left;">Access to requested resource is=20
          forbidden (file permissions, or certificate =
validity)</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">500</TD>
        <TD style=3D"text-align: left;">Catch-all server side error - =
when none=20
          of the specific errors make sense or lazy programmer</TD></TR>
      <TR>
        <TD style=3D"text-align: left;">504</TD>
        <TD style=3D"text-align: left;">Gateway timeout - DNS issue, =
network=20
          issue, machine over =
busy</TD></TR></TBODY></TABLE></LI></UL></LI>
  <LI>DNS:
  <UL>
    <LI>The Domain Name System is an incredibly resilient and scalable=20
    decentralized network of nodes that sits between client and the =
server you=20
    want to reach. </LI>
    <LI>It translates domains (example.com) into IPs</LI>
    <LI>DNS has a many-to-many relationship between domains and IPs. A =
single=20
    A-Record (domain) or C-NAME (subdomain) can resolve to multiple IPs =
and the=20
    DNS will route requests in a round robin fashion.</LI>
    <LI>Upside - Typically DNS also isnt something youd need to =
maintain, so you=20
    pretty much get your load balancing for free.</LI>
    <LI>Downside - DNS loadbalancing is very basic. DNS doesnt typically =
perform=20
    healthchecks (except AWS Route 53). DNS Zone files are also heavily =
cached,=20
    so changes can take a while to propagate.</LI></UL></LI></UL>
<HR class=3D"section">

<H2 id=3D"performance"><A name=3D"performance" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#performance"></A>Performance</H2>
<UL>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Facts/Facts.ht=
ml">Time=20
  scales</A>:
  <UL>
    <LI>There are ~100K seconds in a day and ~2.5M seconds in a month =
and ~30M=20
    seconds in a year.</LI>
    <LI>Using UINT64 as a nanosecond counter is good. It will take above =
500=20
    years for the counter to overflow.</LI></UL></LI>
  <LI>Conversion:<BR>Note, <SPAN><SPAN =
class=3D"MathJax_Preview"></SPAN><SPAN=20
  class=3D"MathJax" id=3D"MathJax-Element-4-Frame" role=3D"textbox" =
aria-readonly=3D"true"><NOBR><SPAN=20
  class=3D"math" id=3D"MathJax-Span-16" style=3D"width: 5.75em; display: =
inline-block;"><SPAN=20
  style=3D"width: 4.69em; height: 0px; font-size: 122%; display: =
inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.65em, 1000em, 2.86em, -0.44em);"><SPAN=20
  class=3D"mrow" id=3D"MathJax-Span-17"><SPAN class=3D"msubsup"=20
  id=3D"MathJax-Span-18"><SPAN style=3D"width: 1.33em; height: 0px; =
display: inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.84em, -0.44em);"><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-19"=20
  style=3D"font-family: MathJax_Main;">2</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
  style=3D"left: 0.54em; top: -2.74em; position: absolute;"><SPAN =
class=3D"texatom"=20
  id=3D"MathJax-Span-20"><SPAN class=3D"mrow" =
id=3D"MathJax-Span-21"><SPAN class=3D"mn"=20
  id=3D"MathJax-Span-22"=20
  style=3D"font-family: MathJax_Main; font-size: =
70.7%;">10</SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN><SPAN=20
  class=3D"mtext" id=3D"MathJax-Span-23"=20
  style=3D"font-family: MathJax_Main;">&nbsp;</SPAN><SPAN class=3D"mo" =
id=3D"MathJax-Span-24"=20
  style=3D"padding-left: 0.27em; font-family: =
MathJax_Main;">=E2=89=88</SPAN><SPAN class=3D"mtext"=20
  id=3D"MathJax-Span-25"=20
  style=3D"padding-left: 0.27em; font-family: =
MathJax_Main;">&nbsp;</SPAN><SPAN=20
  class=3D"msubsup" id=3D"MathJax-Span-26"><SPAN style=3D"width: 1.49em; =
height: 0px; display: inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.86em, -0.4em);"><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-27"=20
  style=3D"font-family: MathJax_Main;">10</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
  style=3D"left: 1.03em; top: -2.74em; position: absolute;"><SPAN =
class=3D"mn" id=3D"MathJax-Span-28"=20
  style=3D"font-family: MathJax_Main; font-size: 70.7%;">3</SPAN><SPAN =
style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.67em; display: =
inline-block;"></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 1.21em; overflow: hidden; vertical-align: =
-0.09em; border-left-width: 0em; border-left-style: solid; display: =
inline-block;"></SPAN></SPAN></NOBR></SPAN>
<SCRIPT id=3D"MathJax-Element-4" type=3D"math/tex">2^{10} \ \approx \ =
10^3</SCRIPT>
  </SPAN>, therefore, <SPAN><SPAN class=3D"MathJax_Preview"></SPAN><SPAN =
class=3D"MathJax"=20
  id=3D"MathJax-Element-5-Frame" role=3D"textbox" =
aria-readonly=3D"true"><NOBR><SPAN=20
  class=3D"math" id=3D"MathJax-Span-29" style=3D"width: 5.75em; display: =
inline-block;"><SPAN=20
  style=3D"width: 4.69em; height: 0px; font-size: 122%; display: =
inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.65em, 1000em, 2.86em, -0.44em);"><SPAN=20
  class=3D"mrow" id=3D"MathJax-Span-30"><SPAN class=3D"msubsup"=20
  id=3D"MathJax-Span-31"><SPAN style=3D"width: 1.33em; height: 0px; =
display: inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.84em, -0.44em);"><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-32"=20
  style=3D"font-family: MathJax_Main;">2</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
  style=3D"left: 0.54em; top: -2.74em; position: absolute;"><SPAN =
class=3D"texatom"=20
  id=3D"MathJax-Span-33"><SPAN class=3D"mrow" =
id=3D"MathJax-Span-34"><SPAN class=3D"mn"=20
  id=3D"MathJax-Span-35"=20
  style=3D"font-family: MathJax_Main; font-size: =
70.7%;">30</SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN><SPAN=20
  class=3D"mtext" id=3D"MathJax-Span-36"=20
  style=3D"font-family: MathJax_Main;">&nbsp;</SPAN><SPAN class=3D"mo" =
id=3D"MathJax-Span-37"=20
  style=3D"padding-left: 0.27em; font-family: =
MathJax_Main;">=E2=89=88</SPAN><SPAN class=3D"mtext"=20
  id=3D"MathJax-Span-38"=20
  style=3D"padding-left: 0.27em; font-family: =
MathJax_Main;">&nbsp;</SPAN><SPAN=20
  class=3D"msubsup" id=3D"MathJax-Span-39"><SPAN style=3D"width: 1.49em; =
height: 0px; display: inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.86em, -0.4em);"><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-40"=20
  style=3D"font-family: MathJax_Main;">10</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
  style=3D"left: 1.03em; top: -2.74em; position: absolute;"><SPAN =
class=3D"mn" id=3D"MathJax-Span-41"=20
  style=3D"font-family: MathJax_Main; font-size: 70.7%;">9</SPAN><SPAN =
style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.67em; display: =
inline-block;"></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 1.21em; overflow: hidden; vertical-align: =
-0.09em; border-left-width: 0em; border-left-style: solid; display: =
inline-block;"></SPAN></SPAN></NOBR></SPAN>
<SCRIPT id=3D"MathJax-Element-5" type=3D"math/tex">2^{30} \ \approx \ =
10^9</SCRIPT>
  </SPAN>, and <SPAN><SPAN class=3D"MathJax_Preview"></SPAN><SPAN =
class=3D"MathJax"=20
  id=3D"MathJax-Element-6-Frame" role=3D"textbox" =
aria-readonly=3D"true"><NOBR><SPAN=20
  class=3D"math" id=3D"MathJax-Span-42" style=3D"width: 7.81em; display: =
inline-block;"><SPAN=20
  style=3D"width: 6.39em; height: 0px; font-size: 122%; display: =
inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.65em, 1000em, 2.86em, -0.44em);"><SPAN=20
  class=3D"mrow" id=3D"MathJax-Span-43"><SPAN class=3D"msubsup"=20
  id=3D"MathJax-Span-44"><SPAN style=3D"width: 1.33em; height: 0px; =
display: inline-block; position: relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.84em, -0.44em);"><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-45"=20
  style=3D"font-family: MathJax_Main;">2</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
  style=3D"left: 0.54em; top: -2.74em; position: absolute;"><SPAN =
class=3D"texatom"=20
  id=3D"MathJax-Span-46"><SPAN class=3D"mrow" =
id=3D"MathJax-Span-47"><SPAN class=3D"mn"=20
  id=3D"MathJax-Span-48"=20
  style=3D"font-family: MathJax_Main; font-size: =
70.7%;">32</SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN><SPAN=20
  class=3D"mtext" id=3D"MathJax-Span-49"=20
  style=3D"font-family: MathJax_Main;">&nbsp;</SPAN><SPAN class=3D"mo" =
id=3D"MathJax-Span-50"=20
  style=3D"padding-left: 0.27em; font-family: =
MathJax_Main;">=E2=89=88</SPAN><SPAN class=3D"mtext"=20
  id=3D"MathJax-Span-51"=20
  style=3D"padding-left: 0.27em; font-family: =
MathJax_Main;">&nbsp;</SPAN><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-52"=20
  style=3D"font-family: MathJax_Main;">4</SPAN><SPAN class=3D"mo" =
id=3D"MathJax-Span-53"=20
  style=3D"padding-left: 0.22em; font-family: =
MathJax_Main;">=C3=97</SPAN><SPAN class=3D"msubsup"=20
  id=3D"MathJax-Span-54" style=3D"padding-left: 0.22em;"><SPAN =
style=3D"width: 1.49em; height: 0px; display: inline-block; position: =
relative;"><SPAN=20
  style=3D"left: 0em; top: -2.67em; position: absolute; clip: =
rect(1.84em, 1000em, 2.86em, -0.4em);"><SPAN=20
  class=3D"mn" id=3D"MathJax-Span-55"=20
  style=3D"font-family: MathJax_Main;">10</SPAN><SPAN style=3D"width: =
0px; height: 2.67em; display: inline-block;"></SPAN></SPAN><SPAN=20
  style=3D"left: 1.03em; top: -2.74em; position: absolute;"><SPAN =
class=3D"mn" id=3D"MathJax-Span-56"=20
  style=3D"font-family: MathJax_Main; font-size: 70.7%;">9</SPAN><SPAN =
style=3D"width: 0px; height: 2.35em; display: =
inline-block;"></SPAN></SPAN></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 2.67em; display: =
inline-block;"></SPAN></SPAN></SPAN><SPAN=20
  style=3D"width: 0px; height: 1.21em; overflow: hidden; vertical-align: =
-0.09em; border-left-width: 0em; border-left-style: solid; display: =
inline-block;"></SPAN></SPAN></NOBR></SPAN>
<SCRIPT id=3D"MathJax-Element-6" type=3D"math/tex">2^{32} \ \approx \ 4 =
\times 10^9</SCRIPT>
  </SPAN></LI>
  <LI>Memory consistency:
  <UL>
    <LI>x86 offers strong memory model. No out-of-order stores (wmb() =
not=20
    required). </LI>
    <LI>Every Load implies acquire semantics and every store implies =
release=20
    semantics. The biggest pitfall is <STRONG>Loads may be reordered =
with older=20
    stores to different locations</STRONG> (StoreLoad problem).</LI>
    <LI>Also, even if processor does not re-order, <STRONG>compiler is =
free to=20
    re-order</STRONG></LI></UL></LI>
  <LI>Intel CPU architecture names<BR>Sandy_Bridge(2012) &lt; =
Ivy_Bridge(2013)=20
  &lt; Haswell (2014) &lt; Broadwell (2015) &lt; Skylake (2016)</LI>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Networking/CS_=
Networking.html#performance">Networking=20
  Performance</A>
  <UL>=20
    <LI>With 64B packets (84B on wire), 10Gbps imples 14.8MPPS which =
implies=20
    67.92ns per packet which implies 201 cycles (3Ghz CPU)</LI>
    <LI>In 100ns, a 3.0GHz CPU covers 300 cycles. With an IPC of 4, it =
can=20
    execute upto 1200 instructions.</LI>
    <LI>Opposite, 100 cycles on a 3.0GHz CPU takes around 33ns.</LI>
    <LI>L1 data cache read is ~4 cycles, L2 data cache read is ~10 =
cycles, L3=20
    data cache read is ~30 cycles. Local memory read and system_calls =
are=20
    ~100-150 cycles, NUMA remote socket memory read is around 200-300 =
cycles,=20
    context switch is ~2000 cycles (maybe a lot more with cache=20
    invalidation).</LI>
    <LI>A message from Sydney to New York and back can take over 200ms. =
</LI>
    <LI>It takes upto <A =
href=3D"https://blogs.dropbox.com/tech/2016/11/infrastructure-update-push=
ing-the-edges-of-our-global-performance/">180ms=20
    for data traveling by undersea cables at nearly the speed of light =
to cross=20
    the Pacific Ocean</A>. Data traveling across the Atlantic can take =
up to 90=20
    milliseconds.</LI>
    <LI>Amazon found that every 100ms of latency cost them more than 1% =
of=20
    revenue. Google once found that adding 500ms of latency, or half a =
second,=20
    cost them 20% of their users <A=20
    href=3D"http://bitfunnel.org/strangeloop/">reference</A></LI>
    <LI>Some newer technologies such as Intel Omnipath allow for within=20
    datacenter round-trips of <A =
href=3D"https://2016.javazone.no/program/a-quest-for-predictable-latency-=
with-java-concurrency">1-2us=20
    or under</A></LI></UL></LI>
  <LI>Techniques to boost performance:
  <UL>
    <LI>Batching (amortize locking and HW access costs), Pre-allocation=20
    (Hugepages avoid TLB lookups, remove cost of dynamic mem =
allocation),=20
    Pre-fetching.</LI>
    <LI>Staying CPU/NUMA local, avoid locking.</LI>
    <LI>Shrink meta data to a minimum (keep metadata to 1-2 cachelines), =
reduce=20
    syscalls.</LI>
    <LI>Faster cache-optimal data structures (for each cache-line fetch, =
get=20
    several elements). Avoid false-sharing of cachelines between =
cores.</LI>
    <LI>Pre-allocated buffer caches.</LI></UL></LI>
  <LI>Read about <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Parallel_Proce=
ssing_and_Distributed_Design/CS_Concurrency_Parallel.html#concurrency-vs.=
-parallelism">concurrency=20
  vs parallelism here</A></LI>
  <LI>Read about <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/Parall=
el_Processing_and_Distributed_Design/Cloud%20Computing/CS_Distributed_Sys=
tems.html#3">CAP=20
  theorem and how to optimize for read/write heavy=20
  workloads</A>-cap-theorem)</LI>
  <LI>Read an introduction about <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Parallel_Proce=
ssing_and_Distributed_Design/Cloud%20Computing/CS_Distributed_Systems.htm=
l#7">Consensus(PAXOS,=20
  Raft)</A>-the-consensus-problem) and <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Parallel_Proce=
ssing_and_Distributed_Design/Cloud%20Computing/CS_Distributed_Systems.htm=
l#8">Election=20
  problem(Chubby, =
Zookeeper)</A>-the-election-problem=E2=80=94-leader-election)</LI>
  <LI>Look at different <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Networking/CS_=
Load_Balancer_vTM.html#load-balancing-algorithms">load=20
  balancing algorithms in vTM</A></LI></UL>
<HR class=3D"section">

<H2 id=3D"language-(c/c++/python)"><A name=3D"language-(c/c++/python)" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#language-(c/c++/python)"></A>Language=20
(C/C++/Python)</H2>
<UL>
  <LI>Taken from <A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Programming_La=
nguages/CS_C++.html#faqs">C++=20
  FAQs</A></LI>
  <LI>Class member Scope
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Type</TH>
      <TH style=3D"text-align: left;">About</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Public =
members</STRONG></TD>
      <TD style=3D"text-align: left;">Public members are accessible from =

        anywhere the class is visible.</TD></TR>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Private =
members</STRONG></TD>
      <TD style=3D"text-align: left;">Private members are only =
accessible from=20
        the same class <STRONG>or a friend (function or =
class)</STRONG>.</TD></TR>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Protected =
members</STRONG></TD>
      <TD style=3D"text-align: left;">Protected members are accessible =
from the=20
        same class, <STRONG>derived classes, or a friend (function or=20
        class)</STRONG>.</TD></TR></TBODY></TABLE></LI></UL>
<HR class=3D"section">

<H2 id=3D"os"><A name=3D"os" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#os"></A>OS</H2>
<H3 id=3D"process"><A name=3D"process" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#process"></A>Process</H3>
<UL>
  <LI>Each process runs in its own memory sand-box (<STRONG>virtual =
address=20
  space</STRONG>). In 32-bit mode, Address Space is limited to 4GB.
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Virtual Address Space diagram</TH>
      <TH style=3D"text-align: left;">Notes on different =
segment</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;"><IMG title=3D"Virtual Address =
space layout"=20
        alt=3D"Virtual Address space layout" src=3D""></TD>
      <TD style=3D"text-align: left;"><STRONG>Stack Segment</STRONG> =
<BR>=E2=80=94 Grows=20
        downwards. Each thread get its own stack. <BR><STRONG>Heap=20
        Segment</STRONG> <BR>=E2=80=94 Heap provides runtime memory =
allocation. Heap is=20
        enlarged via brk() sys_call. <BR><STRONG>BSS Segment</STRONG> =
<BR>=E2=80=94 R/W=20
        <STRONG>anonymous mapped segment to store uninitialized=20
        variables</STRONG>. <BR>=E2=80=94 BSS does not take any space in =
object file.=20
        <BR><STRONG>Data Segment</STRONG> <BR>=E2=80=94 R/W segment =
mapped to binary to=20
        hold initialized variables. <BR>=E2=80=94 Note: even though data =
segment maps a=20
        file, it is private memory (updates are not reflected to file)=20
        <BR><STRONG>Text Segment</STRONG> <BR>=E2=80=94 Read-only file =
backed segment.=20
        <BR>=E2=80=94 Contains code and string literals. <BR>=E2=80=94 =
Writes to this section=20
        will cause a segmentation fault.</TD></TR></TBODY></TABLE></LI>
  <LI><STRONG>Signals</STRONG>
  <UL>=20
    <LI>Signals are software interrupts or traps used to notify a =
process or=20
    thread of a particular event.</LI>
    <LI>Synchronous signals are handled by the thread which caused it =
(e.g.,=20
    illegal instruction/address) </LI>
    <LI>Asynchronous signals are delivered to the first thread found not =

    blocking that signal (e.g., kill, sigqueue, etc).</LI>
    <LI>SIGSTOP and SIGKILL cannot be handled/ignored or blocked by the =
user.=20
    SIGSEGV can have a custom handler.</LI></UL></LI></UL>
<H3 id=3D"kernel"><A name=3D"kernel" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#kernel"></A>Kernel</H3>
<UL>
  <LI><STRONG>Locks</STRONG>
  <TABLE>=20
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Concept</TH>
      <TH style=3D"text-align: left;">Mutex</TH>
      <TH style=3D"text-align: left;">Semaphore</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Difference</STRONG></TD>
      <TD style=3D"text-align: left;">In Mutex, Acquire/Release MUST be =
done by=20
        same thread/process.</TD>
      <TD style=3D"text-align: left;">In Semaphore, release(signal) can =
be done=20
        by another thread/process, i.e., more suitable for=20
synchronization.</TD></TR>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Priority Inversion=20
      Safety</STRONG></TD>
      <TD style=3D"text-align: left;">Yes. Since a mutex knows its =
current=20
        owner, it is possible to promote the priority of the owner =
whenever a=20
        higher-priority task starts waiting on the mutex.</TD>
      <TD style=3D"text-align: left;">Semaphores do not provide priority =

        inversion safety.</TD></TR>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Deletion =
Safety</STRONG></TD>
      <TD style=3D"text-align: left;">Yes. The process holding the mutex =
cannot=20
        be accidentally deleted.</TD>
      <TD style=3D"text-align: left;">Semaphores do not provide deletion =

      safety.</TD></TR></TBODY></TABLE></LI>
  <LI>
  <P><STRONG>RCU</STRONG></P>
  <UL>
    <LI>Better than R/W lock for read-mostly workloads where we do not =
want to=20
    block readers during update. Provides wait-free reads.</LI>
    <LI>RCU ensures read coherency by maintaining multiple versions of =
each=20
    object until all pre-existing read-side critical sections =
complete.</LI>
    <LI>Wait-free reads and writes, Deadlock immunity (readers never =
block)</LI>
    <LI><STRONG>RCU Insert</STRONG>: Publish-subscribe mechanism</LI>
    <LI><STRONG>RCU deletion</STRONG>: Wait for pre-existing RCU readers =
to=20
    complete for deletion and maintain multiple version of recently =
updated=20
    objects.</LI></UL></LI>
  <LI>
  <P><STRONG>System Calls</STRONG></P>
  <UL>
    <LI>Provides <STRONG>abstraction</STRONG>, <STRONG>security and=20
    stability</STRONG> as middleman, =
<STRONG>virtualization</STRONG></LI>
    <LI>Sys_calls run in <STRONG>process context</STRONG> - kernel =
capabile of=20
    blocking/sleeping, pre-empting a process executing a sys_call.</LI>
    <LI>Note: Since a process running a sys_calls can be pre-empted, =
sys_call=20
    implementation must be re-entrant safe.</LI>
    <LI>Old Sequence: user_syscall()-&gt;Soft=20
    Int(x80)-&gt;system_call()(exception handler)-&gt;actual =
syscall()</LI>
    <LI>New Sequence: sysenter - faster way to trap into kernel(in x86). =
Input=20
    syscall# in EAX and upto 5 params in EBX to EDI.</LI>
    <LI><STRONG>vDSO</STRONG>    : certain simple sys-calls can be =
executed=20
    without OS context switch (virtual dynamically linked shared=20
  object)</LI></UL></LI>
  <LI><STRONG>Page Tables</STRONG> - VA to PA mapping for each process =
by=20
  OS.</LI></UL>
<HR class=3D"section">

<H2 id=3D"design"><A name=3D"design" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#design"></A>Design</H2>
<H3 id=3D"event-driven-framework"><A name=3D"event-driven-framework" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#event-driven-framework"></A>Event-Driven=20
Framework</H3>
<UL>
  <LI>Inspired by Futex, implemented an event-driven framework which has =
0=20
  operating overhead when receiver is awake (when receiver awake, no =
locks,=20
  sys_calls or atomic operations or in some cases no-cache-miss either)
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Sender</TH>
      <TH style=3D"text-align: left;">Receiver</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;">Senders need not generate Events =
after=20
        each bulk transmit. <BR> Instead they can =E2=80=9Cread=E2=80=9D =
the current shared=20
        state of the Receiver (sleeping/awake) after each bulk =
transmit.</TD>
      <TD style=3D"text-align: left;">The receiver has to carefully =
toggle its=20
        shared state to =E2=80=9Csleeping=E2=80=9D just before entering =
the Multiplexer and to=20
        =E2=80=9Cawake=E2=80=9D just after exiting the =
Multiplexer.</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">if( bulk_enq() =3D=3D SUCCESS ) { =
<BR> &nbsp;=20
        &nbsp; COMPILE_TIME_READ_BARRIER <BR> &nbsp; &nbsp; =
if(event_driven=20
        &amp;&amp; check_sleep()) { <BR> &nbsp; &nbsp; &nbsp; &nbsp;=20
        send_event() <BR> &nbsp; &nbsp; } <BR> }</TD>
      <TD style=3D"text-align: left;">while(1) { <BR> &nbsp; &nbsp; =
set_awake()=20
        <BR> &nbsp; &nbsp; COMPILE_TIME_WRITE_BARRIER <BR> &nbsp; &nbsp; =

        PROCESS_N_PACKETS() <BR> &nbsp; &nbsp;  if( Pending_packets() =
=3D=3D 0)=20
        set_sleep() <BR> &nbsp; &nbsp; COMPILE_TIME_WRITE_BARRIER <BR> =
&nbsp;=20
        &nbsp; if(Pending_packets()) timeout =3D 0; set_awake() <BR> =
&nbsp; &nbsp;=20
        else                  timeout =3D X <BR> &nbsp; &nbsp;=20
        Multiplexer(timeout) <BR> }</TD></TR>
    <TR>
      <TD style=3D"text-align: left;">The Sender side logic is =
straight-forward=20
        - generate an event only when Sender thinks Receiver is =
=E2=80=9Csleeping=E2=80=9D.</TD>
      <TD style=3D"text-align: left;">Optimized approach. Avoid setting =
Receiver=20
        state to sleep when there are pending packets. <BR> This further =
reduces=20
        the scope of when the sender has to generate=20
  Events.</TD></TR></TBODY></TABLE></LI>
  <LI>Below are some common APIs:
<PRE class=3D"cpp hljs"><CODE class=3D"CPP" data-origin=3D'<pre><code =
class=3D"CPP">set_sleep()   { recv_shared_state =3D SLEEP  =
}&#10;set_awake()   { if(recv_shared_state =3D=3D SLEEP) =
recv_shared_state =3D AWAKE  } &#10;check_sleep() { recv_shared_state =
=3D=3D SLEEP }&#10;</code></pre>'>set_sleep()   { recv_shared_state =3D =
SLEEP  }=0A=
set_awake()   { <SPAN class=3D"hljs-keyword">if</SPAN>(recv_shared_state =
=3D=3D SLEEP) recv_shared_state =3D AWAKE  } =0A=
check_sleep() { recv_shared_state =3D=3D SLEEP }=0A=
</CODE></PRE></LI></UL>
<H3 id=3D"endianness"><A name=3D"endianness" =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/CS_Intv/CS_Rev=
ise.html#endianness"></A>Endianness</H3>
<UL>
  <LI><A =
href=3D"file:///D:/Personal/Prashanth/Backup/Dropbox/Notes/Networking/CS_=
Networking.html#endianness">Endianness</A>=20
  describes how multi-byte data is represented in a computer system.
  <TABLE>
    <THEAD>
    <TR>
      <TH style=3D"text-align: left;">Big Endian</TH>
      <TH style=3D"text-align: left;">Little Endian</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD style=3D"text-align: left;"><STRONG>Most significant byte in =
lowest=20
        address</STRONG></TD>
      <TD style=3D"text-align: left;"><STRONG>Least significant byte in =
lowest=20
        address</STRONG></TD></TR></TBODY></TABLE></LI></UL>
<HR class=3D"section">
<FOOTER style=3D"width: 100%; height: 20px; text-align: right; bottom: =
0px; font-size: 0.8em; margin-left: -25px; position: fixed;">generated=20
by <A href=3D"http://pad.haroopress.com/"=20
target=3D"_blank">haroopad</A></FOOTER></BODY></HTML>
