SSL Handshake:
----Key ------ Cipher  ------ Hash-----
	RSA			AES			HMAC-MD5
	DH			3DES		HMAC-SHA
	DSA			RC4

Client hello sends ssl verion	+ supported ciphers + Random number + (previous session key) + Servername extenstion + compression methods + TLS extensions + elliptic curves
Server hello sends ssl version	+ Pick a cipher		+ Random number	+ (client session key or new session key)
Server send certificate with public key of the server embedded in it.


The TLS Handshake Protocol involves the following steps:

- Exchange hello messages to agree on algorithms, exchange random values, and check for session resumption.

- Exchange the necessary cryptographic parameters to allow the client and server to agree on a premaster secret.

- Exchange certificates and cryptographic information to allow the client and server to authenticate themselves.

- Generate a master secret from the premaster secret and exchanged random values.

- Provide security parameters to the record layer.

- Allow the client and server to verify that their peer has calculated the same security parameters and that the handshake
occurred without tampering by an attacker.

The actual key exchange uses up to four messages:
	- server certificate.
	- server key exchange.
	- client certificate.
	- client key exchange.

Client                                               Server

ClientHello                 -------->
                                                    ServerHello
                                                    Certificate*
                                                    ServerKeyExchange*
                                                    CertificateRequest*
                            <--------      			ServerHelloDone
Certificate*
ClientKeyExchange
CertificateVerify*
[ChangeCipherSpec]
Finished                    -------->
[ChangeCipherSpec]
							<--------             	Finished
Application Data            <------->     Application Data

Fig. 1 - Message flow for a full handshake


Session Resumption:
The client sends a ClientHello using the Session ID of the session to
be resumed. The server then checks its session cache for a match.  If
a match is found, and the server is willing to re-establish the
connection under the specified session state, it will send a
ServerHello with the same Session ID value. At this point, both
client and server must send change cipher spec messages and proceed
directly to finished messages. Once the re-establishment is complete,
the client and server may begin to exchange application layer data.
(See flow chart below.) If a Session ID match is not found, the
server generates a new session ID and the TLS client and server
perform a full handshake.

Client                                              Server

ClientHello					-------->
                                                    ServerHello
                                            		[ChangeCipherSpec]
                            <--------             	Finished
[ChangeCipherSpec]
Finished                    -------->

Application Data            <------->     			Application Data

Fig. 2 - Message flow for an abbreviated handshake
session_id (NOTE)
This is the identity of the session corresponding to this
connection. If the ClientHello.session_id was non-empty, the
server will look in its session cache for a match. If a match is
found and the server is willing to establish the new connection
using the specified session state, the server will respond with
the same value as was supplied by the client. This indicates a
resumed session and dictates that the parties must proceed
directly to the finished messages. Otherwise this field will
contain a different value identifying the new session. The server
may return an empty session_id to indicate that the session will
not be cached and therefore cannot be resumed. If a session is
resumed, it must be resumed using the same cipher suite it was
originally negotiated with.


Client Hello:
    struct {
        ProtocolVersion client_version;
        Random random;
        SessionID session_id;
        CipherSuite cipher_suites<2..2^16-1>;
        CompressionMethod compression_methods<1..2^8-1>;
    } ClientHello;

cipher suites:
Each CipherSuite defines a key exchange algorithm, a bulk encryption algorithm
(including secret key length) and a MAC algorithm.

The server will select a cipher suite or, if no acceptable choices are presented,
return a handshake failure alert and close the connection.

Server Hello:
    struct {
        ProtocolVersion server_version;
        Random random;
        SessionID session_id;
        CipherSuite cipher_suite;
        CompressionMethod compression_method;
    } ServerHello;


Server Certificate:
The certificate type must be appropriate for the selected cipher
suite's key exchange algorithm, and is generally an X.509v3
certificate. It must contain a key which matches the key exchange
method, as follows. Unless otherwise specified, the signing  algorithm for the certificate must be the same as the algorithm
for the certificate key. Unless otherwise specified, the public
key may be of any length.

Key Exchange Algorithm  Certificate Key Type

RSA                     RSA public key; the certificate must allow the key to be used for encryption.

DHE_DSS                 DSS public key.

DHE_RSA                 RSA public key which can be used for signing.

DH_DSS                  Diffie-Hellman key. The algorithm used to sign the certificate should be DSS.

DH_RSA                  Diffie-Hellman key. The algorithm used to sign the certificate should be RSA.

This is a sequence (chain) of X.509v3 certificates. The sender's
certificate must come first in the list. Each following
certificate must directly certify the one preceding it. Because
certificate validation requires that root keys be distributed
independently, the self-signed certificate which specifies the
root certificate authority may optionally be omitted from the
chain, under the assumption that the remote end must already
possess it in order to validate it in any case.


Server Hello Done:
This message means that the server is done sending messages to
support the key exchange, and the client can proceed with its
phase of the key exchange.

Upon receipt of the server hello done message the client should
verify that the server provided a valid certificate if required
and check that the server hello parameters are acceptable.


Client Key Exchange Message:
    struct {
        select (KeyExchangeAlgorithm) {
            case rsa: EncryptedPreMasterSecret;
            case diffie_hellman: ClientDiffieHellmanPublic;
        } exchange_keys;
    } ClientKeyExchange;

	RSA encrypted premaster secret message:
        If RSA is being used for key agreement and authentication, the
        client generates a 48-byte premaster secret, encrypts it using
        the public key from the server's certificate or the temporary RSA
        key provided in a server key exchange message, and sends the
        result in an encrypted premaster secret message. This structure
        is a variant of the client key exchange message, not a message in
        itself.

        Structure of this message:
            struct {
                ProtocolVersion client_version;
                opaque random[46];
            } PreMasterSecret;					--> this 48 byte data (version + random bytes) is client's premaster secret.

        client_version
            The latest (newest) version supported by the client. This is
            used to detect version roll-back attacks. Upon receiving the
            premaster secret, the server should check that this value
            matches the value transmitted by the client in the client
            hello message.

        random
            46 securely-generated random bytes.


Certificate verify:
    This message is used to provide explicit verification of a client
    certificate. This message is only sent following a client
    certificate that has signing capability (i.e. all certificates
    except those containing fixed Diffie-Hellman parameters). When
    sent, it will immediately follow the client key exchange message.

Finished:
The Finished message is the first one protected with the just
negotiated algorithms, keys, and secrets.  Recipients of Finished
messages MUST verify that the contents are correct.  Once a side
has sent its Finished message and received and validated the
Finished message from its peer, it may begin to send and receive
application data over the connection.

Structure of this message:

struct {
opaque verify_data[verify_data_length];
} Finished;

verify_data
    PRF(master_secret, finished_label, Hash(handshake_messages))
    [0..verify_data_length-1];

    finished_label
        For Finished messages sent by the client, the string
        "client finished".  For Finished messages sent by the server,
        the string "server finished".

        Hash denotes a Hash of the handshake messages.  For the PRF
        defined in Section 5, the Hash MUST be the Hash used as the basis
        for the PRF.  Any cipher suite which defines a different PRF MUST
        also define the Hash to use in the Finished computation.
